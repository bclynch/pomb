/* DO NOT EDIT! This file is auto-generated by graphql-code-generator - see `codegen.yml` */
import gql from 'graphql-tag';
import { Injectable } from '@angular/core';
import * as Apollo from 'apollo-angular';
export type Maybe<T> = T | null;

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string,
  String: string,
  Boolean: boolean,
  Int: number,
  Float: number,
  Cursor: any,
  BigInt: any,
  Datetime: any,
  BigFloat: any,
  InternetAddress: any,
  KeyValueHash: any,
  JwtToken: any,
};



export type Account = Node & {
   __typename?: 'Account',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  username: Scalars['String'],
  firstName?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  profilePhoto?: Maybe<Scalars['String']>,
  heroPhoto?: Maybe<Scalars['String']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  autoUpdateLocation: Scalars['Boolean'],
  autoUpdateVisited: Scalars['Boolean'],
  userStatus?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  tripsByUserId: TripsConnection,
  juncturesByUserId: JuncturesConnection,
  postsByAuthor: PostsConnection,
  imagesByUserId: ImagesConnection,
  likesByUserId: LikesConnection,
  tracksByUserId: TracksConnection,
  tracksByTrackUserId: TracksConnection,
  userToCountriesByUserId: UserToCountriesConnection,
  userAccountByAccountId?: Maybe<UserAccount>,
  userAccountsByAccountId: UserAccountsConnection,
  adminAccountByAccountId?: Maybe<AdminAccount>,
  adminAccountsByAccountId: AdminAccountsConnection,
};


export type AccountTripsByUserIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<TripsOrderBy>>,
  condition?: Maybe<TripCondition>,
  filter?: Maybe<TripFilter>
};


export type AccountJuncturesByUserIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<JuncturesOrderBy>>,
  condition?: Maybe<JunctureCondition>,
  filter?: Maybe<JunctureFilter>
};


export type AccountPostsByAuthorArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostsOrderBy>>,
  condition?: Maybe<PostCondition>,
  filter?: Maybe<PostFilter>
};


export type AccountImagesByUserIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ImagesOrderBy>>,
  condition?: Maybe<ImageCondition>,
  filter?: Maybe<ImageFilter>
};


export type AccountLikesByUserIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<LikesOrderBy>>,
  condition?: Maybe<LikeCondition>,
  filter?: Maybe<LikeFilter>
};


export type AccountTracksByUserIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<TracksOrderBy>>,
  condition?: Maybe<TrackCondition>,
  filter?: Maybe<TrackFilter>
};


export type AccountTracksByTrackUserIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<TracksOrderBy>>,
  condition?: Maybe<TrackCondition>,
  filter?: Maybe<TrackFilter>
};


export type AccountUserToCountriesByUserIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<UserToCountriesOrderBy>>,
  condition?: Maybe<UserToCountryCondition>,
  filter?: Maybe<UserToCountryFilter>
};


export type AccountUserAccountsByAccountIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<UserAccountsOrderBy>>,
  condition?: Maybe<UserAccountCondition>,
  filter?: Maybe<UserAccountFilter>
};


export type AccountAdminAccountsByAccountIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<AdminAccountsOrderBy>>,
  condition?: Maybe<AdminAccountCondition>,
  filter?: Maybe<AdminAccountFilter>
};

export type AccountCondition = {
  id?: Maybe<Scalars['Int']>,
  username?: Maybe<Scalars['String']>,
  firstName?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  profilePhoto?: Maybe<Scalars['String']>,
  heroPhoto?: Maybe<Scalars['String']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  autoUpdateLocation?: Maybe<Scalars['Boolean']>,
  autoUpdateVisited?: Maybe<Scalars['Boolean']>,
  userStatus?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type AccountFilter = {
  id?: Maybe<IntFilter>,
  username?: Maybe<StringFilter>,
  firstName?: Maybe<StringFilter>,
  lastName?: Maybe<StringFilter>,
  profilePhoto?: Maybe<StringFilter>,
  heroPhoto?: Maybe<StringFilter>,
  city?: Maybe<StringFilter>,
  country?: Maybe<StringFilter>,
  autoUpdateLocation?: Maybe<BooleanFilter>,
  autoUpdateVisited?: Maybe<BooleanFilter>,
  userStatus?: Maybe<StringFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<AccountFilter>>,
  or?: Maybe<Array<AccountFilter>>,
  not?: Maybe<AccountFilter>,
};

export type AccountInput = {
  id?: Maybe<Scalars['Int']>,
  username: Scalars['String'],
  firstName?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  profilePhoto?: Maybe<Scalars['String']>,
  heroPhoto?: Maybe<Scalars['String']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  autoUpdateLocation?: Maybe<Scalars['Boolean']>,
  autoUpdateVisited?: Maybe<Scalars['Boolean']>,
  userStatus?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type AccountPatch = {
  id?: Maybe<Scalars['Int']>,
  username?: Maybe<Scalars['String']>,
  firstName?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  profilePhoto?: Maybe<Scalars['String']>,
  heroPhoto?: Maybe<Scalars['String']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  autoUpdateLocation?: Maybe<Scalars['Boolean']>,
  autoUpdateVisited?: Maybe<Scalars['Boolean']>,
  userStatus?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type AccountsConnection = {
   __typename?: 'AccountsConnection',
  nodes: Array<Maybe<Account>>,
  edges: Array<AccountsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type AccountSearchIndex = {
   __typename?: 'AccountSearchIndex',
  id?: Maybe<Scalars['Int']>,
  username?: Maybe<Scalars['String']>,
  firstName?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  profilePhoto?: Maybe<Scalars['String']>,
  heroPhoto?: Maybe<Scalars['String']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  autoUpdateLocation?: Maybe<Scalars['Boolean']>,
  autoUpdateVisited?: Maybe<Scalars['Boolean']>,
  userStatus?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  document?: Maybe<Scalars['String']>,
};

export type AccountSearchIndexCondition = {
  id?: Maybe<Scalars['Int']>,
  username?: Maybe<Scalars['String']>,
  firstName?: Maybe<Scalars['String']>,
  lastName?: Maybe<Scalars['String']>,
  profilePhoto?: Maybe<Scalars['String']>,
  heroPhoto?: Maybe<Scalars['String']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  autoUpdateLocation?: Maybe<Scalars['Boolean']>,
  autoUpdateVisited?: Maybe<Scalars['Boolean']>,
  userStatus?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  document?: Maybe<Scalars['String']>,
};

export type AccountSearchIndexFilter = {
  id?: Maybe<IntFilter>,
  username?: Maybe<StringFilter>,
  firstName?: Maybe<StringFilter>,
  lastName?: Maybe<StringFilter>,
  profilePhoto?: Maybe<StringFilter>,
  heroPhoto?: Maybe<StringFilter>,
  city?: Maybe<StringFilter>,
  country?: Maybe<StringFilter>,
  autoUpdateLocation?: Maybe<BooleanFilter>,
  autoUpdateVisited?: Maybe<BooleanFilter>,
  userStatus?: Maybe<StringFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<AccountSearchIndexFilter>>,
  or?: Maybe<Array<AccountSearchIndexFilter>>,
  not?: Maybe<AccountSearchIndexFilter>,
};

export type AccountSearchIndicesConnection = {
   __typename?: 'AccountSearchIndicesConnection',
  nodes: Array<Maybe<AccountSearchIndex>>,
  edges: Array<AccountSearchIndicesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type AccountSearchIndicesEdge = {
   __typename?: 'AccountSearchIndicesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<AccountSearchIndex>,
};

export enum AccountSearchIndicesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  ProfilePhotoAsc = 'PROFILE_PHOTO_ASC',
  ProfilePhotoDesc = 'PROFILE_PHOTO_DESC',
  HeroPhotoAsc = 'HERO_PHOTO_ASC',
  HeroPhotoDesc = 'HERO_PHOTO_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AutoUpdateLocationAsc = 'AUTO_UPDATE_LOCATION_ASC',
  AutoUpdateLocationDesc = 'AUTO_UPDATE_LOCATION_DESC',
  AutoUpdateVisitedAsc = 'AUTO_UPDATE_VISITED_ASC',
  AutoUpdateVisitedDesc = 'AUTO_UPDATE_VISITED_DESC',
  UserStatusAsc = 'USER_STATUS_ASC',
  UserStatusDesc = 'USER_STATUS_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  DocumentAsc = 'DOCUMENT_ASC',
  DocumentDesc = 'DOCUMENT_DESC'
}

export type AccountsEdge = {
   __typename?: 'AccountsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Account>,
};

export enum AccountsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  ProfilePhotoAsc = 'PROFILE_PHOTO_ASC',
  ProfilePhotoDesc = 'PROFILE_PHOTO_DESC',
  HeroPhotoAsc = 'HERO_PHOTO_ASC',
  HeroPhotoDesc = 'HERO_PHOTO_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  AutoUpdateLocationAsc = 'AUTO_UPDATE_LOCATION_ASC',
  AutoUpdateLocationDesc = 'AUTO_UPDATE_LOCATION_DESC',
  AutoUpdateVisitedAsc = 'AUTO_UPDATE_VISITED_ASC',
  AutoUpdateVisitedDesc = 'AUTO_UPDATE_VISITED_DESC',
  UserStatusAsc = 'USER_STATUS_ASC',
  UserStatusDesc = 'USER_STATUS_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AdminAccount = Node & {
   __typename?: 'AdminAccount',
  nodeId: Scalars['ID'],
  accountId: Scalars['Int'],
  email: Scalars['String'],
  passwordHash: Scalars['String'],
  accountByAccountId?: Maybe<Account>,
};

export type AdminAccountCondition = {
  accountId?: Maybe<Scalars['Int']>,
  email?: Maybe<Scalars['String']>,
  passwordHash?: Maybe<Scalars['String']>,
};

export type AdminAccountFilter = {
  accountId?: Maybe<IntFilter>,
  email?: Maybe<StringFilter>,
  passwordHash?: Maybe<StringFilter>,
  and?: Maybe<Array<AdminAccountFilter>>,
  or?: Maybe<Array<AdminAccountFilter>>,
  not?: Maybe<AdminAccountFilter>,
};

export type AdminAccountInput = {
  accountId: Scalars['Int'],
  email: Scalars['String'],
  passwordHash: Scalars['String'],
};

export type AdminAccountPatch = {
  accountId?: Maybe<Scalars['Int']>,
  email?: Maybe<Scalars['String']>,
  passwordHash?: Maybe<Scalars['String']>,
};

export type AdminAccountsConnection = {
   __typename?: 'AdminAccountsConnection',
  nodes: Array<Maybe<AdminAccount>>,
  edges: Array<AdminAccountsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type AdminAccountsEdge = {
   __typename?: 'AdminAccountsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<AdminAccount>,
};

export enum AdminAccountsOrderBy {
  Natural = 'NATURAL',
  AccountIdAsc = 'ACCOUNT_ID_ASC',
  AccountIdDesc = 'ACCOUNT_ID_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  PasswordHashAsc = 'PASSWORD_HASH_ASC',
  PasswordHashDesc = 'PASSWORD_HASH_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type AuthenticateAdminAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  email: Scalars['String'],
  password: Scalars['String'],
};

export type AuthenticateAdminAccountPayload = {
   __typename?: 'AuthenticateAdminAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  jwtToken?: Maybe<Scalars['JwtToken']>,
  query?: Maybe<Query>,
};

export type AuthenticateUserAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  email: Scalars['String'],
  password: Scalars['String'],
};

export type AuthenticateUserAccountPayload = {
   __typename?: 'AuthenticateUserAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  jwtToken?: Maybe<Scalars['JwtToken']>,
  query?: Maybe<Query>,
};


export type BigFloatFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['BigFloat']>,
  notEqualTo?: Maybe<Scalars['BigFloat']>,
  distinctFrom?: Maybe<Scalars['BigFloat']>,
  notDistinctFrom?: Maybe<Scalars['BigFloat']>,
  in?: Maybe<Array<Scalars['BigFloat']>>,
  notIn?: Maybe<Array<Scalars['BigFloat']>>,
  lessThan?: Maybe<Scalars['BigFloat']>,
  lessThanOrEqualTo?: Maybe<Scalars['BigFloat']>,
  greaterThan?: Maybe<Scalars['BigFloat']>,
  greaterThanOrEqualTo?: Maybe<Scalars['BigFloat']>,
};


export type BigIntFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['BigInt']>,
  notEqualTo?: Maybe<Scalars['BigInt']>,
  distinctFrom?: Maybe<Scalars['BigInt']>,
  notDistinctFrom?: Maybe<Scalars['BigInt']>,
  in?: Maybe<Array<Scalars['BigInt']>>,
  notIn?: Maybe<Array<Scalars['BigInt']>>,
  lessThan?: Maybe<Scalars['BigInt']>,
  lessThanOrEqualTo?: Maybe<Scalars['BigInt']>,
  greaterThan?: Maybe<Scalars['BigInt']>,
  greaterThanOrEqualTo?: Maybe<Scalars['BigInt']>,
};

export type BooleanFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['Boolean']>,
  notEqualTo?: Maybe<Scalars['Boolean']>,
  distinctFrom?: Maybe<Scalars['Boolean']>,
  notDistinctFrom?: Maybe<Scalars['Boolean']>,
  in?: Maybe<Array<Scalars['Boolean']>>,
  notIn?: Maybe<Array<Scalars['Boolean']>>,
  lessThan?: Maybe<Scalars['Boolean']>,
  lessThanOrEqualTo?: Maybe<Scalars['Boolean']>,
  greaterThan?: Maybe<Scalars['Boolean']>,
  greaterThanOrEqualTo?: Maybe<Scalars['Boolean']>,
};

export type Config = Node & {
   __typename?: 'Config',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  primaryColor: Scalars['String'],
  secondaryColor: Scalars['String'],
  tagline: Scalars['String'],
  heroBanner: Scalars['String'],
  featuredStory1?: Maybe<Scalars['Int']>,
  featuredStory2?: Maybe<Scalars['Int']>,
  featuredStory3?: Maybe<Scalars['Int']>,
  featuredTrip1?: Maybe<Scalars['Int']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  postByFeaturedStory1?: Maybe<Post>,
  postByFeaturedStory2?: Maybe<Post>,
  postByFeaturedStory3?: Maybe<Post>,
  tripByFeaturedTrip1?: Maybe<Trip>,
};

export type ConfigCondition = {
  id?: Maybe<Scalars['Int']>,
  primaryColor?: Maybe<Scalars['String']>,
  secondaryColor?: Maybe<Scalars['String']>,
  tagline?: Maybe<Scalars['String']>,
  heroBanner?: Maybe<Scalars['String']>,
  featuredStory1?: Maybe<Scalars['Int']>,
  featuredStory2?: Maybe<Scalars['Int']>,
  featuredStory3?: Maybe<Scalars['Int']>,
  featuredTrip1?: Maybe<Scalars['Int']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type ConfigFilter = {
  id?: Maybe<IntFilter>,
  primaryColor?: Maybe<StringFilter>,
  secondaryColor?: Maybe<StringFilter>,
  tagline?: Maybe<StringFilter>,
  heroBanner?: Maybe<StringFilter>,
  featuredStory1?: Maybe<IntFilter>,
  featuredStory2?: Maybe<IntFilter>,
  featuredStory3?: Maybe<IntFilter>,
  featuredTrip1?: Maybe<IntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<ConfigFilter>>,
  or?: Maybe<Array<ConfigFilter>>,
  not?: Maybe<ConfigFilter>,
};

export type ConfigInput = {
  id?: Maybe<Scalars['Int']>,
  primaryColor: Scalars['String'],
  secondaryColor: Scalars['String'],
  tagline: Scalars['String'],
  heroBanner: Scalars['String'],
  featuredStory1?: Maybe<Scalars['Int']>,
  featuredStory2?: Maybe<Scalars['Int']>,
  featuredStory3?: Maybe<Scalars['Int']>,
  featuredTrip1?: Maybe<Scalars['Int']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type ConfigPatch = {
  id?: Maybe<Scalars['Int']>,
  primaryColor?: Maybe<Scalars['String']>,
  secondaryColor?: Maybe<Scalars['String']>,
  tagline?: Maybe<Scalars['String']>,
  heroBanner?: Maybe<Scalars['String']>,
  featuredStory1?: Maybe<Scalars['Int']>,
  featuredStory2?: Maybe<Scalars['Int']>,
  featuredStory3?: Maybe<Scalars['Int']>,
  featuredTrip1?: Maybe<Scalars['Int']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type ConfigsConnection = {
   __typename?: 'ConfigsConnection',
  nodes: Array<Maybe<Config>>,
  edges: Array<ConfigsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type ConfigsEdge = {
   __typename?: 'ConfigsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Config>,
};

export enum ConfigsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PrimaryColorAsc = 'PRIMARY_COLOR_ASC',
  PrimaryColorDesc = 'PRIMARY_COLOR_DESC',
  SecondaryColorAsc = 'SECONDARY_COLOR_ASC',
  SecondaryColorDesc = 'SECONDARY_COLOR_DESC',
  TaglineAsc = 'TAGLINE_ASC',
  TaglineDesc = 'TAGLINE_DESC',
  HeroBannerAsc = 'HERO_BANNER_ASC',
  HeroBannerDesc = 'HERO_BANNER_DESC',
  FeaturedStory_1Asc = 'FEATURED_STORY_1_ASC',
  FeaturedStory_1Desc = 'FEATURED_STORY_1_DESC',
  FeaturedStory_2Asc = 'FEATURED_STORY_2_ASC',
  FeaturedStory_2Desc = 'FEATURED_STORY_2_DESC',
  FeaturedStory_3Asc = 'FEATURED_STORY_3_ASC',
  FeaturedStory_3Desc = 'FEATURED_STORY_3_DESC',
  FeaturedTrip_1Asc = 'FEATURED_TRIP_1_ASC',
  FeaturedTrip_1Desc = 'FEATURED_TRIP_1_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Coord = Node & {
   __typename?: 'Coord',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  junctureId: Scalars['Int'],
  lat: Scalars['BigFloat'],
  lon: Scalars['BigFloat'],
  elevation?: Maybe<Scalars['BigFloat']>,
  coordTime?: Maybe<Scalars['Datetime']>,
  junctureByJunctureId?: Maybe<Juncture>,
};

export type CoordCondition = {
  id?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  lat?: Maybe<Scalars['BigFloat']>,
  lon?: Maybe<Scalars['BigFloat']>,
  elevation?: Maybe<Scalars['BigFloat']>,
  coordTime?: Maybe<Scalars['Datetime']>,
};

export type CoordFilter = {
  id?: Maybe<IntFilter>,
  junctureId?: Maybe<IntFilter>,
  lat?: Maybe<BigFloatFilter>,
  lon?: Maybe<BigFloatFilter>,
  elevation?: Maybe<BigFloatFilter>,
  coordTime?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<CoordFilter>>,
  or?: Maybe<Array<CoordFilter>>,
  not?: Maybe<CoordFilter>,
};

export type CoordInput = {
  id?: Maybe<Scalars['Int']>,
  junctureId: Scalars['Int'],
  lat: Scalars['BigFloat'],
  lon: Scalars['BigFloat'],
  elevation?: Maybe<Scalars['BigFloat']>,
  coordTime?: Maybe<Scalars['Datetime']>,
};

export type CoordPatch = {
  id?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  lat?: Maybe<Scalars['BigFloat']>,
  lon?: Maybe<Scalars['BigFloat']>,
  elevation?: Maybe<Scalars['BigFloat']>,
  coordTime?: Maybe<Scalars['Datetime']>,
};

export type CoordsConnection = {
   __typename?: 'CoordsConnection',
  nodes: Array<Maybe<Coord>>,
  edges: Array<CoordsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type CoordsEdge = {
   __typename?: 'CoordsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Coord>,
};

export enum CoordsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  JunctureIdAsc = 'JUNCTURE_ID_ASC',
  JunctureIdDesc = 'JUNCTURE_ID_DESC',
  LatAsc = 'LAT_ASC',
  LatDesc = 'LAT_DESC',
  LonAsc = 'LON_ASC',
  LonDesc = 'LON_DESC',
  ElevationAsc = 'ELEVATION_ASC',
  ElevationDesc = 'ELEVATION_DESC',
  CoordTimeAsc = 'COORD_TIME_ASC',
  CoordTimeDesc = 'COORD_TIME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type CountriesConnection = {
   __typename?: 'CountriesConnection',
  nodes: Array<Maybe<Country>>,
  edges: Array<CountriesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type CountriesEdge = {
   __typename?: 'CountriesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Country>,
};

export enum CountriesOrderBy {
  Natural = 'NATURAL',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Country = Node & {
   __typename?: 'Country',
  nodeId: Scalars['ID'],
  code: Scalars['String'],
  name: Scalars['String'],
  juncturesByCountry: JuncturesConnection,
  postsByCountry: PostsConnection,
  userToCountriesByCountry: UserToCountriesConnection,
};


export type CountryJuncturesByCountryArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<JuncturesOrderBy>>,
  condition?: Maybe<JunctureCondition>,
  filter?: Maybe<JunctureFilter>
};


export type CountryPostsByCountryArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostsOrderBy>>,
  condition?: Maybe<PostCondition>,
  filter?: Maybe<PostFilter>
};


export type CountryUserToCountriesByCountryArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<UserToCountriesOrderBy>>,
  condition?: Maybe<UserToCountryCondition>,
  filter?: Maybe<UserToCountryFilter>
};

export type CountryCondition = {
  code?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
};

export type CountryFilter = {
  code?: Maybe<StringFilter>,
  name?: Maybe<StringFilter>,
  and?: Maybe<Array<CountryFilter>>,
  or?: Maybe<Array<CountryFilter>>,
  not?: Maybe<CountryFilter>,
};

export type CountryInput = {
  code: Scalars['String'],
  name: Scalars['String'],
};

export type CountryPatch = {
  code?: Maybe<Scalars['String']>,
  name?: Maybe<Scalars['String']>,
};

export type CreateAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  account: AccountInput,
};

export type CreateAccountPayload = {
   __typename?: 'CreateAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  account?: Maybe<Account>,
  query?: Maybe<Query>,
  accountEdge?: Maybe<AccountsEdge>,
};


export type CreateAccountPayloadAccountEdgeArgs = {
  orderBy?: Maybe<Array<AccountsOrderBy>>
};

export type CreateAdminAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  adminAccount: AdminAccountInput,
};

export type CreateAdminAccountPayload = {
   __typename?: 'CreateAdminAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  adminAccount?: Maybe<AdminAccount>,
  query?: Maybe<Query>,
  accountByAccountId?: Maybe<Account>,
  adminAccountEdge?: Maybe<AdminAccountsEdge>,
};


export type CreateAdminAccountPayloadAdminAccountEdgeArgs = {
  orderBy?: Maybe<Array<AdminAccountsOrderBy>>
};

export type CreateConfigInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  config: ConfigInput,
};

export type CreateConfigPayload = {
   __typename?: 'CreateConfigPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  config?: Maybe<Config>,
  query?: Maybe<Query>,
  postByFeaturedStory1?: Maybe<Post>,
  postByFeaturedStory2?: Maybe<Post>,
  postByFeaturedStory3?: Maybe<Post>,
  tripByFeaturedTrip1?: Maybe<Trip>,
  configEdge?: Maybe<ConfigsEdge>,
};


export type CreateConfigPayloadConfigEdgeArgs = {
  orderBy?: Maybe<Array<ConfigsOrderBy>>
};

export type CreateCoordInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  coord: CoordInput,
};

export type CreateCoordPayload = {
   __typename?: 'CreateCoordPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  coord?: Maybe<Coord>,
  query?: Maybe<Query>,
  junctureByJunctureId?: Maybe<Juncture>,
  coordEdge?: Maybe<CoordsEdge>,
};


export type CreateCoordPayloadCoordEdgeArgs = {
  orderBy?: Maybe<Array<CoordsOrderBy>>
};

export type CreateCountryInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  country: CountryInput,
};

export type CreateCountryPayload = {
   __typename?: 'CreateCountryPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  country?: Maybe<Country>,
  query?: Maybe<Query>,
  countryEdge?: Maybe<CountriesEdge>,
};


export type CreateCountryPayloadCountryEdgeArgs = {
  orderBy?: Maybe<Array<CountriesOrderBy>>
};

export type CreateEmailListInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  emailList: EmailListInput,
};

export type CreateEmailListPayload = {
   __typename?: 'CreateEmailListPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  emailList?: Maybe<EmailList>,
  query?: Maybe<Query>,
  emailListEdge?: Maybe<EmailListsEdge>,
};


export type CreateEmailListPayloadEmailListEdgeArgs = {
  orderBy?: Maybe<Array<EmailListsOrderBy>>
};

export type CreateImageInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  image: ImageInput,
};

export type CreateImagePayload = {
   __typename?: 'CreateImagePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  image?: Maybe<Image>,
  query?: Maybe<Query>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  accountByUserId?: Maybe<Account>,
  imageEdge?: Maybe<ImagesEdge>,
};


export type CreateImagePayloadImageEdgeArgs = {
  orderBy?: Maybe<Array<ImagesOrderBy>>
};

export type CreateJunctureInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  juncture: JunctureInput,
};

export type CreateJuncturePayload = {
   __typename?: 'CreateJuncturePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  juncture?: Maybe<Juncture>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  countryByCountry?: Maybe<Country>,
  junctureEdge?: Maybe<JuncturesEdge>,
};


export type CreateJuncturePayloadJunctureEdgeArgs = {
  orderBy?: Maybe<Array<JuncturesOrderBy>>
};

export type CreateLikeInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  like: LikeInput,
};

export type CreateLikePayload = {
   __typename?: 'CreateLikePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  like?: Maybe<Like>,
  query?: Maybe<Query>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  imageByImageId?: Maybe<Image>,
  accountByUserId?: Maybe<Account>,
  likeEdge?: Maybe<LikesEdge>,
};


export type CreateLikePayloadLikeEdgeArgs = {
  orderBy?: Maybe<Array<LikesOrderBy>>
};

export type CreateLoggedActionInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  loggedAction: LoggedActionInput,
};

export type CreateLoggedActionPayload = {
   __typename?: 'CreateLoggedActionPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  loggedAction?: Maybe<LoggedAction>,
  query?: Maybe<Query>,
  loggedActionEdge?: Maybe<LoggedActionsEdge>,
};


export type CreateLoggedActionPayloadLoggedActionEdgeArgs = {
  orderBy?: Maybe<Array<LoggedActionsOrderBy>>
};

export type CreatePostInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  post: PostInput,
};

export type CreatePostPayload = {
   __typename?: 'CreatePostPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  post?: Maybe<Post>,
  query?: Maybe<Query>,
  accountByAuthor?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  countryByCountry?: Maybe<Country>,
  postEdge?: Maybe<PostsEdge>,
};


export type CreatePostPayloadPostEdgeArgs = {
  orderBy?: Maybe<Array<PostsOrderBy>>
};

export type CreatePostTagInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  postTag: PostTagInput,
};

export type CreatePostTagPayload = {
   __typename?: 'CreatePostTagPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  postTag?: Maybe<PostTag>,
  query?: Maybe<Query>,
  postTagEdge?: Maybe<PostTagsEdge>,
};


export type CreatePostTagPayloadPostTagEdgeArgs = {
  orderBy?: Maybe<Array<PostTagsOrderBy>>
};

export type CreatePostToTagInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  postToTag: PostToTagInput,
};

export type CreatePostToTagPayload = {
   __typename?: 'CreatePostToTagPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  postToTag?: Maybe<PostToTag>,
  query?: Maybe<Query>,
  postByPostId?: Maybe<Post>,
  postTagByPostTagId?: Maybe<PostTag>,
  postToTagEdge?: Maybe<PostToTagsEdge>,
};


export type CreatePostToTagPayloadPostToTagEdgeArgs = {
  orderBy?: Maybe<Array<PostToTagsOrderBy>>
};

export type CreateTrackInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  track: TrackInput,
};

export type CreateTrackPayload = {
   __typename?: 'CreateTrackPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  track?: Maybe<Track>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  accountByTrackUserId?: Maybe<Account>,
  trackEdge?: Maybe<TracksEdge>,
};


export type CreateTrackPayloadTrackEdgeArgs = {
  orderBy?: Maybe<Array<TracksOrderBy>>
};

export type CreateTripInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  trip: TripInput,
};

export type CreateTripPayload = {
   __typename?: 'CreateTripPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  trip?: Maybe<Trip>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  tripEdge?: Maybe<TripsEdge>,
};


export type CreateTripPayloadTripEdgeArgs = {
  orderBy?: Maybe<Array<TripsOrderBy>>
};

export type CreateUserAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  userAccount: UserAccountInput,
};

export type CreateUserAccountPayload = {
   __typename?: 'CreateUserAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  userAccount?: Maybe<UserAccount>,
  query?: Maybe<Query>,
  accountByAccountId?: Maybe<Account>,
  userAccountEdge?: Maybe<UserAccountsEdge>,
};


export type CreateUserAccountPayloadUserAccountEdgeArgs = {
  orderBy?: Maybe<Array<UserAccountsOrderBy>>
};

export type CreateUserToCountryInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  userToCountry: UserToCountryInput,
};

export type CreateUserToCountryPayload = {
   __typename?: 'CreateUserToCountryPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  userToCountry?: Maybe<UserToCountry>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  countryByCountry?: Maybe<Country>,
  userToCountryEdge?: Maybe<UserToCountriesEdge>,
};


export type CreateUserToCountryPayloadUserToCountryEdgeArgs = {
  orderBy?: Maybe<Array<UserToCountriesOrderBy>>
};



export type DatetimeFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['Datetime']>,
  notEqualTo?: Maybe<Scalars['Datetime']>,
  distinctFrom?: Maybe<Scalars['Datetime']>,
  notDistinctFrom?: Maybe<Scalars['Datetime']>,
  in?: Maybe<Array<Scalars['Datetime']>>,
  notIn?: Maybe<Array<Scalars['Datetime']>>,
  lessThan?: Maybe<Scalars['Datetime']>,
  lessThanOrEqualTo?: Maybe<Scalars['Datetime']>,
  greaterThan?: Maybe<Scalars['Datetime']>,
  greaterThanOrEqualTo?: Maybe<Scalars['Datetime']>,
};

export type DeleteAccountByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteAccountByUsernameInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  username: Scalars['String'],
};

export type DeleteAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteAccountPayload = {
   __typename?: 'DeleteAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  account?: Maybe<Account>,
  deletedAccountId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountEdge?: Maybe<AccountsEdge>,
};


export type DeleteAccountPayloadAccountEdgeArgs = {
  orderBy?: Maybe<Array<AccountsOrderBy>>
};

export type DeleteAdminAccountByAccountIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  accountId: Scalars['Int'],
};

export type DeleteAdminAccountByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  email: Scalars['String'],
};

export type DeleteAdminAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteAdminAccountPayload = {
   __typename?: 'DeleteAdminAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  adminAccount?: Maybe<AdminAccount>,
  deletedAdminAccountId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountByAccountId?: Maybe<Account>,
  adminAccountEdge?: Maybe<AdminAccountsEdge>,
};


export type DeleteAdminAccountPayloadAdminAccountEdgeArgs = {
  orderBy?: Maybe<Array<AdminAccountsOrderBy>>
};

export type DeleteConfigByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteConfigInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteConfigPayload = {
   __typename?: 'DeleteConfigPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  config?: Maybe<Config>,
  deletedConfigId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  postByFeaturedStory1?: Maybe<Post>,
  postByFeaturedStory2?: Maybe<Post>,
  postByFeaturedStory3?: Maybe<Post>,
  tripByFeaturedTrip1?: Maybe<Trip>,
  configEdge?: Maybe<ConfigsEdge>,
};


export type DeleteConfigPayloadConfigEdgeArgs = {
  orderBy?: Maybe<Array<ConfigsOrderBy>>
};

export type DeleteCoordByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteCoordInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteCoordPayload = {
   __typename?: 'DeleteCoordPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  coord?: Maybe<Coord>,
  deletedCoordId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  junctureByJunctureId?: Maybe<Juncture>,
  coordEdge?: Maybe<CoordsEdge>,
};


export type DeleteCoordPayloadCoordEdgeArgs = {
  orderBy?: Maybe<Array<CoordsOrderBy>>
};

export type DeleteCountryByCodeInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  code: Scalars['String'],
};

export type DeleteCountryInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteCountryPayload = {
   __typename?: 'DeleteCountryPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  country?: Maybe<Country>,
  deletedCountryId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  countryEdge?: Maybe<CountriesEdge>,
};


export type DeleteCountryPayloadCountryEdgeArgs = {
  orderBy?: Maybe<Array<CountriesOrderBy>>
};

export type DeleteEmailListByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  email: Scalars['String'],
};

export type DeleteEmailListByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteEmailListInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteEmailListPayload = {
   __typename?: 'DeleteEmailListPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  emailList?: Maybe<EmailList>,
  deletedEmailListId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  emailListEdge?: Maybe<EmailListsEdge>,
};


export type DeleteEmailListPayloadEmailListEdgeArgs = {
  orderBy?: Maybe<Array<EmailListsOrderBy>>
};

export type DeleteImageByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteImageInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteImagePayload = {
   __typename?: 'DeleteImagePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  image?: Maybe<Image>,
  deletedImageId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  accountByUserId?: Maybe<Account>,
  imageEdge?: Maybe<ImagesEdge>,
};


export type DeleteImagePayloadImageEdgeArgs = {
  orderBy?: Maybe<Array<ImagesOrderBy>>
};

export type DeleteJunctureByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteJunctureInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteJuncturePayload = {
   __typename?: 'DeleteJuncturePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  juncture?: Maybe<Juncture>,
  deletedJunctureId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  countryByCountry?: Maybe<Country>,
  junctureEdge?: Maybe<JuncturesEdge>,
};


export type DeleteJuncturePayloadJunctureEdgeArgs = {
  orderBy?: Maybe<Array<JuncturesOrderBy>>
};

export type DeleteLikeByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteLikeInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteLikePayload = {
   __typename?: 'DeleteLikePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  like?: Maybe<Like>,
  deletedLikeId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  imageByImageId?: Maybe<Image>,
  accountByUserId?: Maybe<Account>,
  likeEdge?: Maybe<LikesEdge>,
};


export type DeleteLikePayloadLikeEdgeArgs = {
  orderBy?: Maybe<Array<LikesOrderBy>>
};

export type DeleteLoggedActionByEventIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  eventId: Scalars['BigInt'],
};

export type DeleteLoggedActionInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteLoggedActionPayload = {
   __typename?: 'DeleteLoggedActionPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  loggedAction?: Maybe<LoggedAction>,
  deletedLoggedActionId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  loggedActionEdge?: Maybe<LoggedActionsEdge>,
};


export type DeleteLoggedActionPayloadLoggedActionEdgeArgs = {
  orderBy?: Maybe<Array<LoggedActionsOrderBy>>
};

export type DeletePostByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeletePostInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeletePostPayload = {
   __typename?: 'DeletePostPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  post?: Maybe<Post>,
  deletedPostId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountByAuthor?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  countryByCountry?: Maybe<Country>,
  postEdge?: Maybe<PostsEdge>,
};


export type DeletePostPayloadPostEdgeArgs = {
  orderBy?: Maybe<Array<PostsOrderBy>>
};

export type DeletePostTagByNameInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  name: Scalars['String'],
};

export type DeletePostTagInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeletePostTagPayload = {
   __typename?: 'DeletePostTagPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  postTag?: Maybe<PostTag>,
  deletedPostTagId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  postTagEdge?: Maybe<PostTagsEdge>,
};


export type DeletePostTagPayloadPostTagEdgeArgs = {
  orderBy?: Maybe<Array<PostTagsOrderBy>>
};

export type DeletePostToTagByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeletePostToTagInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeletePostToTagPayload = {
   __typename?: 'DeletePostToTagPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  postToTag?: Maybe<PostToTag>,
  deletedPostToTagId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  postByPostId?: Maybe<Post>,
  postTagByPostTagId?: Maybe<PostTag>,
  postToTagEdge?: Maybe<PostToTagsEdge>,
};


export type DeletePostToTagPayloadPostToTagEdgeArgs = {
  orderBy?: Maybe<Array<PostToTagsOrderBy>>
};

export type DeleteTrackByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteTrackInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteTrackPayload = {
   __typename?: 'DeleteTrackPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  track?: Maybe<Track>,
  deletedTrackId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  accountByTrackUserId?: Maybe<Account>,
  trackEdge?: Maybe<TracksEdge>,
};


export type DeleteTrackPayloadTrackEdgeArgs = {
  orderBy?: Maybe<Array<TracksOrderBy>>
};

export type DeleteTripByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteTripInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteTripPayload = {
   __typename?: 'DeleteTripPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  trip?: Maybe<Trip>,
  deletedTripId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  tripEdge?: Maybe<TripsEdge>,
};


export type DeleteTripPayloadTripEdgeArgs = {
  orderBy?: Maybe<Array<TripsOrderBy>>
};

export type DeleteUserAccountByAccountIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  accountId: Scalars['Int'],
};

export type DeleteUserAccountByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  email: Scalars['String'],
};

export type DeleteUserAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteUserAccountPayload = {
   __typename?: 'DeleteUserAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  userAccount?: Maybe<UserAccount>,
  deletedUserAccountId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountByAccountId?: Maybe<Account>,
  userAccountEdge?: Maybe<UserAccountsEdge>,
};


export type DeleteUserAccountPayloadUserAccountEdgeArgs = {
  orderBy?: Maybe<Array<UserAccountsOrderBy>>
};

export type DeleteUserToCountryByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  id: Scalars['Int'],
};

export type DeleteUserToCountryInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
};

export type DeleteUserToCountryPayload = {
   __typename?: 'DeleteUserToCountryPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  userToCountry?: Maybe<UserToCountry>,
  deletedUserToCountryId?: Maybe<Scalars['ID']>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  countryByCountry?: Maybe<Country>,
  userToCountryEdge?: Maybe<UserToCountriesEdge>,
};


export type DeleteUserToCountryPayloadUserToCountryEdgeArgs = {
  orderBy?: Maybe<Array<UserToCountriesOrderBy>>
};

export type EmailList = Node & {
   __typename?: 'EmailList',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  email: Scalars['String'],
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type EmailListCondition = {
  id?: Maybe<Scalars['Int']>,
  email?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type EmailListFilter = {
  id?: Maybe<IntFilter>,
  email?: Maybe<StringFilter>,
  createdAt?: Maybe<BigIntFilter>,
  and?: Maybe<Array<EmailListFilter>>,
  or?: Maybe<Array<EmailListFilter>>,
  not?: Maybe<EmailListFilter>,
};

export type EmailListInput = {
  id?: Maybe<Scalars['Int']>,
  email: Scalars['String'],
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type EmailListPatch = {
  id?: Maybe<Scalars['Int']>,
  email?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type EmailListsConnection = {
   __typename?: 'EmailListsConnection',
  nodes: Array<Maybe<EmailList>>,
  edges: Array<EmailListsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type EmailListsEdge = {
   __typename?: 'EmailListsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<EmailList>,
};

export enum EmailListsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Image = Node & {
   __typename?: 'Image',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  type: ImageType,
  url: Scalars['String'],
  title?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  accountByUserId?: Maybe<Account>,
  likesByImageId: LikesConnection,
};


export type ImageLikesByImageIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<LikesOrderBy>>,
  condition?: Maybe<LikeCondition>,
  filter?: Maybe<LikeFilter>
};

export type ImageCondition = {
  id?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  type?: Maybe<ImageType>,
  url?: Maybe<Scalars['String']>,
  title?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type ImageFilter = {
  id?: Maybe<IntFilter>,
  tripId?: Maybe<IntFilter>,
  junctureId?: Maybe<IntFilter>,
  postId?: Maybe<IntFilter>,
  userId?: Maybe<IntFilter>,
  type?: Maybe<ImageTypeFilter>,
  url?: Maybe<StringFilter>,
  title?: Maybe<StringFilter>,
  description?: Maybe<StringFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<ImageFilter>>,
  or?: Maybe<Array<ImageFilter>>,
  not?: Maybe<ImageFilter>,
};

export type ImageInput = {
  id?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  type: ImageType,
  url: Scalars['String'],
  title?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type ImagePatch = {
  id?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  type?: Maybe<ImageType>,
  url?: Maybe<Scalars['String']>,
  title?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type ImagesConnection = {
   __typename?: 'ImagesConnection',
  nodes: Array<Maybe<Image>>,
  edges: Array<ImagesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type ImagesEdge = {
   __typename?: 'ImagesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Image>,
};

export enum ImagesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TripIdAsc = 'TRIP_ID_ASC',
  TripIdDesc = 'TRIP_ID_DESC',
  JunctureIdAsc = 'JUNCTURE_ID_ASC',
  JunctureIdDesc = 'JUNCTURE_ID_DESC',
  PostIdAsc = 'POST_ID_ASC',
  PostIdDesc = 'POST_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export enum ImageType {
  LeadLarge = 'LEAD_LARGE',
  LeadSmall = 'LEAD_SMALL',
  Gallery = 'GALLERY',
  Banner = 'BANNER'
}

export type ImageTypeFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<ImageType>,
  notEqualTo?: Maybe<ImageType>,
  distinctFrom?: Maybe<ImageType>,
  notDistinctFrom?: Maybe<ImageType>,
  in?: Maybe<Array<ImageType>>,
  notIn?: Maybe<Array<ImageType>>,
  lessThan?: Maybe<ImageType>,
  lessThanOrEqualTo?: Maybe<ImageType>,
  greaterThan?: Maybe<ImageType>,
  greaterThanOrEqualTo?: Maybe<ImageType>,
};


export type InternetAddressFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['InternetAddress']>,
  notEqualTo?: Maybe<Scalars['InternetAddress']>,
  distinctFrom?: Maybe<Scalars['InternetAddress']>,
  notDistinctFrom?: Maybe<Scalars['InternetAddress']>,
  in?: Maybe<Array<Scalars['InternetAddress']>>,
  notIn?: Maybe<Array<Scalars['InternetAddress']>>,
  lessThan?: Maybe<Scalars['InternetAddress']>,
  lessThanOrEqualTo?: Maybe<Scalars['InternetAddress']>,
  greaterThan?: Maybe<Scalars['InternetAddress']>,
  greaterThanOrEqualTo?: Maybe<Scalars['InternetAddress']>,
  contains?: Maybe<Scalars['InternetAddress']>,
  containsOrEqualTo?: Maybe<Scalars['InternetAddress']>,
  containedBy?: Maybe<Scalars['InternetAddress']>,
  containedByOrEqualTo?: Maybe<Scalars['InternetAddress']>,
  containsOrContainedBy?: Maybe<Scalars['InternetAddress']>,
};

export type IntFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['Int']>,
  notEqualTo?: Maybe<Scalars['Int']>,
  distinctFrom?: Maybe<Scalars['Int']>,
  notDistinctFrom?: Maybe<Scalars['Int']>,
  in?: Maybe<Array<Scalars['Int']>>,
  notIn?: Maybe<Array<Scalars['Int']>>,
  lessThan?: Maybe<Scalars['Int']>,
  lessThanOrEqualTo?: Maybe<Scalars['Int']>,
  greaterThan?: Maybe<Scalars['Int']>,
  greaterThanOrEqualTo?: Maybe<Scalars['Int']>,
};

export type Juncture = Node & {
   __typename?: 'Juncture',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  userId: Scalars['Int'],
  tripId: Scalars['Int'],
  name: Scalars['String'],
  arrivalDate: Scalars['BigInt'],
  description?: Maybe<Scalars['String']>,
  type: JunctureType,
  lat: Scalars['BigFloat'],
  lon: Scalars['BigFloat'],
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  markerImg?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  accountByUserId?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  countryByCountry?: Maybe<Country>,
  postsByJunctureId: PostsConnection,
  coordsByJunctureId: CoordsConnection,
  imagesByJunctureId: ImagesConnection,
  likesByJunctureId: LikesConnection,
};


export type JuncturePostsByJunctureIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostsOrderBy>>,
  condition?: Maybe<PostCondition>,
  filter?: Maybe<PostFilter>
};


export type JunctureCoordsByJunctureIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<CoordsOrderBy>>,
  condition?: Maybe<CoordCondition>,
  filter?: Maybe<CoordFilter>
};


export type JunctureImagesByJunctureIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ImagesOrderBy>>,
  condition?: Maybe<ImageCondition>,
  filter?: Maybe<ImageFilter>
};


export type JunctureLikesByJunctureIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<LikesOrderBy>>,
  condition?: Maybe<LikeCondition>,
  filter?: Maybe<LikeFilter>
};

export type JunctureCondition = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  arrivalDate?: Maybe<Scalars['BigInt']>,
  description?: Maybe<Scalars['String']>,
  type?: Maybe<JunctureType>,
  lat?: Maybe<Scalars['BigFloat']>,
  lon?: Maybe<Scalars['BigFloat']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  markerImg?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type JunctureFilter = {
  id?: Maybe<IntFilter>,
  userId?: Maybe<IntFilter>,
  tripId?: Maybe<IntFilter>,
  name?: Maybe<StringFilter>,
  arrivalDate?: Maybe<BigIntFilter>,
  description?: Maybe<StringFilter>,
  type?: Maybe<JunctureTypeFilter>,
  lat?: Maybe<BigFloatFilter>,
  lon?: Maybe<BigFloatFilter>,
  city?: Maybe<StringFilter>,
  country?: Maybe<StringFilter>,
  isDraft?: Maybe<BooleanFilter>,
  markerImg?: Maybe<StringFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<JunctureFilter>>,
  or?: Maybe<Array<JunctureFilter>>,
  not?: Maybe<JunctureFilter>,
};

export type JunctureInput = {
  id?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  tripId: Scalars['Int'],
  name: Scalars['String'],
  arrivalDate: Scalars['BigInt'],
  description?: Maybe<Scalars['String']>,
  type: JunctureType,
  lat: Scalars['BigFloat'],
  lon: Scalars['BigFloat'],
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  markerImg?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type JuncturePatch = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  arrivalDate?: Maybe<Scalars['BigInt']>,
  description?: Maybe<Scalars['String']>,
  type?: Maybe<JunctureType>,
  lat?: Maybe<Scalars['BigFloat']>,
  lon?: Maybe<Scalars['BigFloat']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  markerImg?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type JuncturesConnection = {
   __typename?: 'JuncturesConnection',
  nodes: Array<Maybe<Juncture>>,
  edges: Array<JuncturesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type JuncturesEdge = {
   __typename?: 'JuncturesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Juncture>,
};

export enum JuncturesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  TripIdAsc = 'TRIP_ID_ASC',
  TripIdDesc = 'TRIP_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  ArrivalDateAsc = 'ARRIVAL_DATE_ASC',
  ArrivalDateDesc = 'ARRIVAL_DATE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  LatAsc = 'LAT_ASC',
  LatDesc = 'LAT_DESC',
  LonAsc = 'LON_ASC',
  LonDesc = 'LON_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  IsDraftAsc = 'IS_DRAFT_ASC',
  IsDraftDesc = 'IS_DRAFT_DESC',
  MarkerImgAsc = 'MARKER_IMG_ASC',
  MarkerImgDesc = 'MARKER_IMG_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export enum JunctureType {
  Hike = 'HIKE',
  Run = 'RUN',
  Bike = 'BIKE',
  Transportation = 'TRANSPORTATION',
  Flight = 'FLIGHT'
}

export type JunctureTypeFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<JunctureType>,
  notEqualTo?: Maybe<JunctureType>,
  distinctFrom?: Maybe<JunctureType>,
  notDistinctFrom?: Maybe<JunctureType>,
  in?: Maybe<Array<JunctureType>>,
  notIn?: Maybe<Array<JunctureType>>,
  lessThan?: Maybe<JunctureType>,
  lessThanOrEqualTo?: Maybe<JunctureType>,
  greaterThan?: Maybe<JunctureType>,
  greaterThanOrEqualTo?: Maybe<JunctureType>,
};



export type KeyValueHashFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['KeyValueHash']>,
  notEqualTo?: Maybe<Scalars['KeyValueHash']>,
  distinctFrom?: Maybe<Scalars['KeyValueHash']>,
  notDistinctFrom?: Maybe<Scalars['KeyValueHash']>,
  in?: Maybe<Array<Scalars['KeyValueHash']>>,
  notIn?: Maybe<Array<Scalars['KeyValueHash']>>,
  contains?: Maybe<Scalars['KeyValueHash']>,
  containsKey?: Maybe<Scalars['String']>,
  containsAllKeys?: Maybe<Array<Scalars['String']>>,
  containsAnyKeys?: Maybe<Array<Scalars['String']>>,
  containedBy?: Maybe<Scalars['KeyValueHash']>,
};

export type Like = Node & {
   __typename?: 'Like',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  imageId?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  createdAt?: Maybe<Scalars['BigInt']>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  imageByImageId?: Maybe<Image>,
  accountByUserId?: Maybe<Account>,
};

export type LikeCondition = {
  id?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  imageId?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type LikeFilter = {
  id?: Maybe<IntFilter>,
  tripId?: Maybe<IntFilter>,
  junctureId?: Maybe<IntFilter>,
  postId?: Maybe<IntFilter>,
  imageId?: Maybe<IntFilter>,
  userId?: Maybe<IntFilter>,
  createdAt?: Maybe<BigIntFilter>,
  and?: Maybe<Array<LikeFilter>>,
  or?: Maybe<Array<LikeFilter>>,
  not?: Maybe<LikeFilter>,
};

export type LikeInput = {
  id?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  imageId?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type LikePatch = {
  id?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  imageId?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type LikesConnection = {
   __typename?: 'LikesConnection',
  nodes: Array<Maybe<Like>>,
  edges: Array<LikesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type LikesEdge = {
   __typename?: 'LikesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Like>,
};

export enum LikesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  TripIdAsc = 'TRIP_ID_ASC',
  TripIdDesc = 'TRIP_ID_DESC',
  JunctureIdAsc = 'JUNCTURE_ID_ASC',
  JunctureIdDesc = 'JUNCTURE_ID_DESC',
  PostIdAsc = 'POST_ID_ASC',
  PostIdDesc = 'POST_ID_DESC',
  ImageIdAsc = 'IMAGE_ID_ASC',
  ImageIdDesc = 'IMAGE_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type LoggedAction = Node & {
   __typename?: 'LoggedAction',
  nodeId: Scalars['ID'],
  eventId: Scalars['BigInt'],
  tableName: Scalars['String'],
  accountId?: Maybe<Scalars['Int']>,
  sessionUserName?: Maybe<Scalars['String']>,
  actionTstampTx: Scalars['Datetime'],
  clientAddr?: Maybe<Scalars['InternetAddress']>,
  action: Scalars['String'],
  rowData?: Maybe<Scalars['KeyValueHash']>,
  changedFields?: Maybe<Scalars['KeyValueHash']>,
};

export type LoggedActionCondition = {
  eventId?: Maybe<Scalars['BigInt']>,
  tableName?: Maybe<Scalars['String']>,
  accountId?: Maybe<Scalars['Int']>,
  sessionUserName?: Maybe<Scalars['String']>,
  actionTstampTx?: Maybe<Scalars['Datetime']>,
  clientAddr?: Maybe<Scalars['InternetAddress']>,
  action?: Maybe<Scalars['String']>,
  rowData?: Maybe<Scalars['KeyValueHash']>,
  changedFields?: Maybe<Scalars['KeyValueHash']>,
};

export type LoggedActionFilter = {
  eventId?: Maybe<BigIntFilter>,
  tableName?: Maybe<StringFilter>,
  accountId?: Maybe<IntFilter>,
  sessionUserName?: Maybe<StringFilter>,
  actionTstampTx?: Maybe<DatetimeFilter>,
  clientAddr?: Maybe<InternetAddressFilter>,
  action?: Maybe<StringFilter>,
  rowData?: Maybe<KeyValueHashFilter>,
  changedFields?: Maybe<KeyValueHashFilter>,
  and?: Maybe<Array<LoggedActionFilter>>,
  or?: Maybe<Array<LoggedActionFilter>>,
  not?: Maybe<LoggedActionFilter>,
};

export type LoggedActionInput = {
  eventId?: Maybe<Scalars['BigInt']>,
  tableName: Scalars['String'],
  accountId?: Maybe<Scalars['Int']>,
  sessionUserName?: Maybe<Scalars['String']>,
  actionTstampTx: Scalars['Datetime'],
  clientAddr?: Maybe<Scalars['InternetAddress']>,
  action: Scalars['String'],
  rowData?: Maybe<Scalars['KeyValueHash']>,
  changedFields?: Maybe<Scalars['KeyValueHash']>,
};

export type LoggedActionPatch = {
  eventId?: Maybe<Scalars['BigInt']>,
  tableName?: Maybe<Scalars['String']>,
  accountId?: Maybe<Scalars['Int']>,
  sessionUserName?: Maybe<Scalars['String']>,
  actionTstampTx?: Maybe<Scalars['Datetime']>,
  clientAddr?: Maybe<Scalars['InternetAddress']>,
  action?: Maybe<Scalars['String']>,
  rowData?: Maybe<Scalars['KeyValueHash']>,
  changedFields?: Maybe<Scalars['KeyValueHash']>,
};

export type LoggedActionsConnection = {
   __typename?: 'LoggedActionsConnection',
  nodes: Array<Maybe<LoggedAction>>,
  edges: Array<LoggedActionsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type LoggedActionsEdge = {
   __typename?: 'LoggedActionsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<LoggedAction>,
};

export enum LoggedActionsOrderBy {
  Natural = 'NATURAL',
  EventIdAsc = 'EVENT_ID_ASC',
  EventIdDesc = 'EVENT_ID_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  AccountIdAsc = 'ACCOUNT_ID_ASC',
  AccountIdDesc = 'ACCOUNT_ID_DESC',
  SessionUserNameAsc = 'SESSION_USER_NAME_ASC',
  SessionUserNameDesc = 'SESSION_USER_NAME_DESC',
  ActionTstampTxAsc = 'ACTION_TSTAMP_TX_ASC',
  ActionTstampTxDesc = 'ACTION_TSTAMP_TX_DESC',
  ClientAddrAsc = 'CLIENT_ADDR_ASC',
  ClientAddrDesc = 'CLIENT_ADDR_DESC',
  ActionAsc = 'ACTION_ASC',
  ActionDesc = 'ACTION_DESC',
  RowDataAsc = 'ROW_DATA_ASC',
  RowDataDesc = 'ROW_DATA_DESC',
  ChangedFieldsAsc = 'CHANGED_FIELDS_ASC',
  ChangedFieldsDesc = 'CHANGED_FIELDS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Mutation = {
   __typename?: 'Mutation',
  createAccount?: Maybe<CreateAccountPayload>,
  createConfig?: Maybe<CreateConfigPayload>,
  createCoord?: Maybe<CreateCoordPayload>,
  createCountry?: Maybe<CreateCountryPayload>,
  createEmailList?: Maybe<CreateEmailListPayload>,
  createImage?: Maybe<CreateImagePayload>,
  createJuncture?: Maybe<CreateJuncturePayload>,
  createLike?: Maybe<CreateLikePayload>,
  createLoggedAction?: Maybe<CreateLoggedActionPayload>,
  createPost?: Maybe<CreatePostPayload>,
  createPostTag?: Maybe<CreatePostTagPayload>,
  createPostToTag?: Maybe<CreatePostToTagPayload>,
  createTrack?: Maybe<CreateTrackPayload>,
  createTrip?: Maybe<CreateTripPayload>,
  createUserToCountry?: Maybe<CreateUserToCountryPayload>,
  createAdminAccount?: Maybe<CreateAdminAccountPayload>,
  createUserAccount?: Maybe<CreateUserAccountPayload>,
  updateAccount?: Maybe<UpdateAccountPayload>,
  updateAccountById?: Maybe<UpdateAccountPayload>,
  updateAccountByUsername?: Maybe<UpdateAccountPayload>,
  updateConfig?: Maybe<UpdateConfigPayload>,
  updateConfigById?: Maybe<UpdateConfigPayload>,
  updateCoord?: Maybe<UpdateCoordPayload>,
  updateCoordById?: Maybe<UpdateCoordPayload>,
  updateCountry?: Maybe<UpdateCountryPayload>,
  updateCountryByCode?: Maybe<UpdateCountryPayload>,
  updateEmailList?: Maybe<UpdateEmailListPayload>,
  updateEmailListById?: Maybe<UpdateEmailListPayload>,
  updateEmailListByEmail?: Maybe<UpdateEmailListPayload>,
  updateImage?: Maybe<UpdateImagePayload>,
  updateImageById?: Maybe<UpdateImagePayload>,
  updateJuncture?: Maybe<UpdateJuncturePayload>,
  updateJunctureById?: Maybe<UpdateJuncturePayload>,
  updateLike?: Maybe<UpdateLikePayload>,
  updateLikeById?: Maybe<UpdateLikePayload>,
  updateLoggedAction?: Maybe<UpdateLoggedActionPayload>,
  updateLoggedActionByEventId?: Maybe<UpdateLoggedActionPayload>,
  updatePost?: Maybe<UpdatePostPayload>,
  updatePostById?: Maybe<UpdatePostPayload>,
  updatePostTag?: Maybe<UpdatePostTagPayload>,
  updatePostTagByName?: Maybe<UpdatePostTagPayload>,
  updatePostToTag?: Maybe<UpdatePostToTagPayload>,
  updatePostToTagById?: Maybe<UpdatePostToTagPayload>,
  updateTrack?: Maybe<UpdateTrackPayload>,
  updateTrackById?: Maybe<UpdateTrackPayload>,
  updateTrip?: Maybe<UpdateTripPayload>,
  updateTripById?: Maybe<UpdateTripPayload>,
  updateUserToCountry?: Maybe<UpdateUserToCountryPayload>,
  updateUserToCountryById?: Maybe<UpdateUserToCountryPayload>,
  updateAdminAccount?: Maybe<UpdateAdminAccountPayload>,
  updateAdminAccountByAccountId?: Maybe<UpdateAdminAccountPayload>,
  updateAdminAccountByEmail?: Maybe<UpdateAdminAccountPayload>,
  updateUserAccount?: Maybe<UpdateUserAccountPayload>,
  updateUserAccountByAccountId?: Maybe<UpdateUserAccountPayload>,
  updateUserAccountByEmail?: Maybe<UpdateUserAccountPayload>,
  deleteAccount?: Maybe<DeleteAccountPayload>,
  deleteAccountById?: Maybe<DeleteAccountPayload>,
  deleteAccountByUsername?: Maybe<DeleteAccountPayload>,
  deleteConfig?: Maybe<DeleteConfigPayload>,
  deleteConfigById?: Maybe<DeleteConfigPayload>,
  deleteCoord?: Maybe<DeleteCoordPayload>,
  deleteCoordById?: Maybe<DeleteCoordPayload>,
  deleteCountry?: Maybe<DeleteCountryPayload>,
  deleteCountryByCode?: Maybe<DeleteCountryPayload>,
  deleteEmailList?: Maybe<DeleteEmailListPayload>,
  deleteEmailListById?: Maybe<DeleteEmailListPayload>,
  deleteEmailListByEmail?: Maybe<DeleteEmailListPayload>,
  deleteImage?: Maybe<DeleteImagePayload>,
  deleteImageById?: Maybe<DeleteImagePayload>,
  deleteJuncture?: Maybe<DeleteJuncturePayload>,
  deleteJunctureById?: Maybe<DeleteJuncturePayload>,
  deleteLike?: Maybe<DeleteLikePayload>,
  deleteLikeById?: Maybe<DeleteLikePayload>,
  deleteLoggedAction?: Maybe<DeleteLoggedActionPayload>,
  deleteLoggedActionByEventId?: Maybe<DeleteLoggedActionPayload>,
  deletePost?: Maybe<DeletePostPayload>,
  deletePostById?: Maybe<DeletePostPayload>,
  deletePostTag?: Maybe<DeletePostTagPayload>,
  deletePostTagByName?: Maybe<DeletePostTagPayload>,
  deletePostToTag?: Maybe<DeletePostToTagPayload>,
  deletePostToTagById?: Maybe<DeletePostToTagPayload>,
  deleteTrack?: Maybe<DeleteTrackPayload>,
  deleteTrackById?: Maybe<DeleteTrackPayload>,
  deleteTrip?: Maybe<DeleteTripPayload>,
  deleteTripById?: Maybe<DeleteTripPayload>,
  deleteUserToCountry?: Maybe<DeleteUserToCountryPayload>,
  deleteUserToCountryById?: Maybe<DeleteUserToCountryPayload>,
  deleteAdminAccount?: Maybe<DeleteAdminAccountPayload>,
  deleteAdminAccountByAccountId?: Maybe<DeleteAdminAccountPayload>,
  deleteAdminAccountByEmail?: Maybe<DeleteAdminAccountPayload>,
  deleteUserAccount?: Maybe<DeleteUserAccountPayload>,
  deleteUserAccountByAccountId?: Maybe<DeleteUserAccountPayload>,
  deleteUserAccountByEmail?: Maybe<DeleteUserAccountPayload>,
  authenticateAdminAccount?: Maybe<AuthenticateAdminAccountPayload>,
  authenticateUserAccount?: Maybe<AuthenticateUserAccountPayload>,
  registerAdminAccount?: Maybe<RegisterAdminAccountPayload>,
  registerUserAccount?: Maybe<RegisterUserAccountPayload>,
  resetPassword?: Maybe<ResetPasswordPayload>,
  updatePassword?: Maybe<UpdatePasswordPayload>,
};


export type MutationCreateAccountArgs = {
  input: CreateAccountInput
};


export type MutationCreateConfigArgs = {
  input: CreateConfigInput
};


export type MutationCreateCoordArgs = {
  input: CreateCoordInput
};


export type MutationCreateCountryArgs = {
  input: CreateCountryInput
};


export type MutationCreateEmailListArgs = {
  input: CreateEmailListInput
};


export type MutationCreateImageArgs = {
  input: CreateImageInput
};


export type MutationCreateJunctureArgs = {
  input: CreateJunctureInput
};


export type MutationCreateLikeArgs = {
  input: CreateLikeInput
};


export type MutationCreateLoggedActionArgs = {
  input: CreateLoggedActionInput
};


export type MutationCreatePostArgs = {
  input: CreatePostInput
};


export type MutationCreatePostTagArgs = {
  input: CreatePostTagInput
};


export type MutationCreatePostToTagArgs = {
  input: CreatePostToTagInput
};


export type MutationCreateTrackArgs = {
  input: CreateTrackInput
};


export type MutationCreateTripArgs = {
  input: CreateTripInput
};


export type MutationCreateUserToCountryArgs = {
  input: CreateUserToCountryInput
};


export type MutationCreateAdminAccountArgs = {
  input: CreateAdminAccountInput
};


export type MutationCreateUserAccountArgs = {
  input: CreateUserAccountInput
};


export type MutationUpdateAccountArgs = {
  input: UpdateAccountInput
};


export type MutationUpdateAccountByIdArgs = {
  input: UpdateAccountByIdInput
};


export type MutationUpdateAccountByUsernameArgs = {
  input: UpdateAccountByUsernameInput
};


export type MutationUpdateConfigArgs = {
  input: UpdateConfigInput
};


export type MutationUpdateConfigByIdArgs = {
  input: UpdateConfigByIdInput
};


export type MutationUpdateCoordArgs = {
  input: UpdateCoordInput
};


export type MutationUpdateCoordByIdArgs = {
  input: UpdateCoordByIdInput
};


export type MutationUpdateCountryArgs = {
  input: UpdateCountryInput
};


export type MutationUpdateCountryByCodeArgs = {
  input: UpdateCountryByCodeInput
};


export type MutationUpdateEmailListArgs = {
  input: UpdateEmailListInput
};


export type MutationUpdateEmailListByIdArgs = {
  input: UpdateEmailListByIdInput
};


export type MutationUpdateEmailListByEmailArgs = {
  input: UpdateEmailListByEmailInput
};


export type MutationUpdateImageArgs = {
  input: UpdateImageInput
};


export type MutationUpdateImageByIdArgs = {
  input: UpdateImageByIdInput
};


export type MutationUpdateJunctureArgs = {
  input: UpdateJunctureInput
};


export type MutationUpdateJunctureByIdArgs = {
  input: UpdateJunctureByIdInput
};


export type MutationUpdateLikeArgs = {
  input: UpdateLikeInput
};


export type MutationUpdateLikeByIdArgs = {
  input: UpdateLikeByIdInput
};


export type MutationUpdateLoggedActionArgs = {
  input: UpdateLoggedActionInput
};


export type MutationUpdateLoggedActionByEventIdArgs = {
  input: UpdateLoggedActionByEventIdInput
};


export type MutationUpdatePostArgs = {
  input: UpdatePostInput
};


export type MutationUpdatePostByIdArgs = {
  input: UpdatePostByIdInput
};


export type MutationUpdatePostTagArgs = {
  input: UpdatePostTagInput
};


export type MutationUpdatePostTagByNameArgs = {
  input: UpdatePostTagByNameInput
};


export type MutationUpdatePostToTagArgs = {
  input: UpdatePostToTagInput
};


export type MutationUpdatePostToTagByIdArgs = {
  input: UpdatePostToTagByIdInput
};


export type MutationUpdateTrackArgs = {
  input: UpdateTrackInput
};


export type MutationUpdateTrackByIdArgs = {
  input: UpdateTrackByIdInput
};


export type MutationUpdateTripArgs = {
  input: UpdateTripInput
};


export type MutationUpdateTripByIdArgs = {
  input: UpdateTripByIdInput
};


export type MutationUpdateUserToCountryArgs = {
  input: UpdateUserToCountryInput
};


export type MutationUpdateUserToCountryByIdArgs = {
  input: UpdateUserToCountryByIdInput
};


export type MutationUpdateAdminAccountArgs = {
  input: UpdateAdminAccountInput
};


export type MutationUpdateAdminAccountByAccountIdArgs = {
  input: UpdateAdminAccountByAccountIdInput
};


export type MutationUpdateAdminAccountByEmailArgs = {
  input: UpdateAdminAccountByEmailInput
};


export type MutationUpdateUserAccountArgs = {
  input: UpdateUserAccountInput
};


export type MutationUpdateUserAccountByAccountIdArgs = {
  input: UpdateUserAccountByAccountIdInput
};


export type MutationUpdateUserAccountByEmailArgs = {
  input: UpdateUserAccountByEmailInput
};


export type MutationDeleteAccountArgs = {
  input: DeleteAccountInput
};


export type MutationDeleteAccountByIdArgs = {
  input: DeleteAccountByIdInput
};


export type MutationDeleteAccountByUsernameArgs = {
  input: DeleteAccountByUsernameInput
};


export type MutationDeleteConfigArgs = {
  input: DeleteConfigInput
};


export type MutationDeleteConfigByIdArgs = {
  input: DeleteConfigByIdInput
};


export type MutationDeleteCoordArgs = {
  input: DeleteCoordInput
};


export type MutationDeleteCoordByIdArgs = {
  input: DeleteCoordByIdInput
};


export type MutationDeleteCountryArgs = {
  input: DeleteCountryInput
};


export type MutationDeleteCountryByCodeArgs = {
  input: DeleteCountryByCodeInput
};


export type MutationDeleteEmailListArgs = {
  input: DeleteEmailListInput
};


export type MutationDeleteEmailListByIdArgs = {
  input: DeleteEmailListByIdInput
};


export type MutationDeleteEmailListByEmailArgs = {
  input: DeleteEmailListByEmailInput
};


export type MutationDeleteImageArgs = {
  input: DeleteImageInput
};


export type MutationDeleteImageByIdArgs = {
  input: DeleteImageByIdInput
};


export type MutationDeleteJunctureArgs = {
  input: DeleteJunctureInput
};


export type MutationDeleteJunctureByIdArgs = {
  input: DeleteJunctureByIdInput
};


export type MutationDeleteLikeArgs = {
  input: DeleteLikeInput
};


export type MutationDeleteLikeByIdArgs = {
  input: DeleteLikeByIdInput
};


export type MutationDeleteLoggedActionArgs = {
  input: DeleteLoggedActionInput
};


export type MutationDeleteLoggedActionByEventIdArgs = {
  input: DeleteLoggedActionByEventIdInput
};


export type MutationDeletePostArgs = {
  input: DeletePostInput
};


export type MutationDeletePostByIdArgs = {
  input: DeletePostByIdInput
};


export type MutationDeletePostTagArgs = {
  input: DeletePostTagInput
};


export type MutationDeletePostTagByNameArgs = {
  input: DeletePostTagByNameInput
};


export type MutationDeletePostToTagArgs = {
  input: DeletePostToTagInput
};


export type MutationDeletePostToTagByIdArgs = {
  input: DeletePostToTagByIdInput
};


export type MutationDeleteTrackArgs = {
  input: DeleteTrackInput
};


export type MutationDeleteTrackByIdArgs = {
  input: DeleteTrackByIdInput
};


export type MutationDeleteTripArgs = {
  input: DeleteTripInput
};


export type MutationDeleteTripByIdArgs = {
  input: DeleteTripByIdInput
};


export type MutationDeleteUserToCountryArgs = {
  input: DeleteUserToCountryInput
};


export type MutationDeleteUserToCountryByIdArgs = {
  input: DeleteUserToCountryByIdInput
};


export type MutationDeleteAdminAccountArgs = {
  input: DeleteAdminAccountInput
};


export type MutationDeleteAdminAccountByAccountIdArgs = {
  input: DeleteAdminAccountByAccountIdInput
};


export type MutationDeleteAdminAccountByEmailArgs = {
  input: DeleteAdminAccountByEmailInput
};


export type MutationDeleteUserAccountArgs = {
  input: DeleteUserAccountInput
};


export type MutationDeleteUserAccountByAccountIdArgs = {
  input: DeleteUserAccountByAccountIdInput
};


export type MutationDeleteUserAccountByEmailArgs = {
  input: DeleteUserAccountByEmailInput
};


export type MutationAuthenticateAdminAccountArgs = {
  input: AuthenticateAdminAccountInput
};


export type MutationAuthenticateUserAccountArgs = {
  input: AuthenticateUserAccountInput
};


export type MutationRegisterAdminAccountArgs = {
  input: RegisterAdminAccountInput
};


export type MutationRegisterUserAccountArgs = {
  input: RegisterUserAccountInput
};


export type MutationResetPasswordArgs = {
  input: ResetPasswordInput
};


export type MutationUpdatePasswordArgs = {
  input: UpdatePasswordInput
};

export type Node = {
  nodeId: Scalars['ID'],
};

export type PageInfo = {
   __typename?: 'PageInfo',
  hasNextPage: Scalars['Boolean'],
  hasPreviousPage: Scalars['Boolean'],
  startCursor?: Maybe<Scalars['Cursor']>,
  endCursor?: Maybe<Scalars['Cursor']>,
};

export type Post = Node & {
   __typename?: 'Post',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  author: Scalars['Int'],
  title: Scalars['String'],
  subtitle: Scalars['String'],
  content: Scalars['String'],
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft: Scalars['Boolean'],
  isScheduled: Scalars['Boolean'],
  scheduledDate?: Maybe<Scalars['BigInt']>,
  isPublished: Scalars['Boolean'],
  publishedDate?: Maybe<Scalars['BigInt']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  accountByAuthor?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  countryByCountry?: Maybe<Country>,
  postToTagsByPostId: PostToTagsConnection,
  imagesByPostId: ImagesConnection,
  likesByPostId: LikesConnection,
  configsByFeaturedStory1: ConfigsConnection,
  configsByFeaturedStory2: ConfigsConnection,
  configsByFeaturedStory3: ConfigsConnection,
};


export type PostPostToTagsByPostIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostToTagsOrderBy>>,
  condition?: Maybe<PostToTagCondition>,
  filter?: Maybe<PostToTagFilter>
};


export type PostImagesByPostIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ImagesOrderBy>>,
  condition?: Maybe<ImageCondition>,
  filter?: Maybe<ImageFilter>
};


export type PostLikesByPostIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<LikesOrderBy>>,
  condition?: Maybe<LikeCondition>,
  filter?: Maybe<LikeFilter>
};


export type PostConfigsByFeaturedStory1Args = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ConfigsOrderBy>>,
  condition?: Maybe<ConfigCondition>,
  filter?: Maybe<ConfigFilter>
};


export type PostConfigsByFeaturedStory2Args = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ConfigsOrderBy>>,
  condition?: Maybe<ConfigCondition>,
  filter?: Maybe<ConfigFilter>
};


export type PostConfigsByFeaturedStory3Args = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ConfigsOrderBy>>,
  condition?: Maybe<ConfigCondition>,
  filter?: Maybe<ConfigFilter>
};

export type PostCondition = {
  id?: Maybe<Scalars['Int']>,
  author?: Maybe<Scalars['Int']>,
  title?: Maybe<Scalars['String']>,
  subtitle?: Maybe<Scalars['String']>,
  content?: Maybe<Scalars['String']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  isScheduled?: Maybe<Scalars['Boolean']>,
  scheduledDate?: Maybe<Scalars['BigInt']>,
  isPublished?: Maybe<Scalars['Boolean']>,
  publishedDate?: Maybe<Scalars['BigInt']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type PostFilter = {
  id?: Maybe<IntFilter>,
  author?: Maybe<IntFilter>,
  title?: Maybe<StringFilter>,
  subtitle?: Maybe<StringFilter>,
  content?: Maybe<StringFilter>,
  tripId?: Maybe<IntFilter>,
  junctureId?: Maybe<IntFilter>,
  city?: Maybe<StringFilter>,
  country?: Maybe<StringFilter>,
  isDraft?: Maybe<BooleanFilter>,
  isScheduled?: Maybe<BooleanFilter>,
  scheduledDate?: Maybe<BigIntFilter>,
  isPublished?: Maybe<BooleanFilter>,
  publishedDate?: Maybe<BigIntFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<PostFilter>>,
  or?: Maybe<Array<PostFilter>>,
  not?: Maybe<PostFilter>,
};

export type PostInput = {
  id?: Maybe<Scalars['Int']>,
  author: Scalars['Int'],
  title: Scalars['String'],
  subtitle: Scalars['String'],
  content: Scalars['String'],
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft: Scalars['Boolean'],
  isScheduled: Scalars['Boolean'],
  scheduledDate?: Maybe<Scalars['BigInt']>,
  isPublished: Scalars['Boolean'],
  publishedDate?: Maybe<Scalars['BigInt']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type PostPatch = {
  id?: Maybe<Scalars['Int']>,
  author?: Maybe<Scalars['Int']>,
  title?: Maybe<Scalars['String']>,
  subtitle?: Maybe<Scalars['String']>,
  content?: Maybe<Scalars['String']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  isScheduled?: Maybe<Scalars['Boolean']>,
  scheduledDate?: Maybe<Scalars['BigInt']>,
  isPublished?: Maybe<Scalars['Boolean']>,
  publishedDate?: Maybe<Scalars['BigInt']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type PostsConnection = {
   __typename?: 'PostsConnection',
  nodes: Array<Maybe<Post>>,
  edges: Array<PostsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type PostSearchIndex = {
   __typename?: 'PostSearchIndex',
  id?: Maybe<Scalars['Int']>,
  author?: Maybe<Scalars['Int']>,
  title?: Maybe<Scalars['String']>,
  subtitle?: Maybe<Scalars['String']>,
  content?: Maybe<Scalars['String']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  isScheduled?: Maybe<Scalars['Boolean']>,
  scheduledDate?: Maybe<Scalars['BigInt']>,
  isPublished?: Maybe<Scalars['Boolean']>,
  publishedDate?: Maybe<Scalars['BigInt']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  document?: Maybe<Scalars['String']>,
};

export type PostSearchIndexCondition = {
  id?: Maybe<Scalars['Int']>,
  author?: Maybe<Scalars['Int']>,
  title?: Maybe<Scalars['String']>,
  subtitle?: Maybe<Scalars['String']>,
  content?: Maybe<Scalars['String']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  isScheduled?: Maybe<Scalars['Boolean']>,
  scheduledDate?: Maybe<Scalars['BigInt']>,
  isPublished?: Maybe<Scalars['Boolean']>,
  publishedDate?: Maybe<Scalars['BigInt']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  document?: Maybe<Scalars['String']>,
};

export type PostSearchIndexFilter = {
  id?: Maybe<IntFilter>,
  author?: Maybe<IntFilter>,
  title?: Maybe<StringFilter>,
  subtitle?: Maybe<StringFilter>,
  content?: Maybe<StringFilter>,
  tripId?: Maybe<IntFilter>,
  junctureId?: Maybe<IntFilter>,
  city?: Maybe<StringFilter>,
  country?: Maybe<StringFilter>,
  isDraft?: Maybe<BooleanFilter>,
  isScheduled?: Maybe<BooleanFilter>,
  scheduledDate?: Maybe<BigIntFilter>,
  isPublished?: Maybe<BooleanFilter>,
  publishedDate?: Maybe<BigIntFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<PostSearchIndexFilter>>,
  or?: Maybe<Array<PostSearchIndexFilter>>,
  not?: Maybe<PostSearchIndexFilter>,
};

export type PostSearchIndicesConnection = {
   __typename?: 'PostSearchIndicesConnection',
  nodes: Array<Maybe<PostSearchIndex>>,
  edges: Array<PostSearchIndicesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type PostSearchIndicesEdge = {
   __typename?: 'PostSearchIndicesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<PostSearchIndex>,
};

export enum PostSearchIndicesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AuthorAsc = 'AUTHOR_ASC',
  AuthorDesc = 'AUTHOR_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  SubtitleAsc = 'SUBTITLE_ASC',
  SubtitleDesc = 'SUBTITLE_DESC',
  ContentAsc = 'CONTENT_ASC',
  ContentDesc = 'CONTENT_DESC',
  TripIdAsc = 'TRIP_ID_ASC',
  TripIdDesc = 'TRIP_ID_DESC',
  JunctureIdAsc = 'JUNCTURE_ID_ASC',
  JunctureIdDesc = 'JUNCTURE_ID_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  IsDraftAsc = 'IS_DRAFT_ASC',
  IsDraftDesc = 'IS_DRAFT_DESC',
  IsScheduledAsc = 'IS_SCHEDULED_ASC',
  IsScheduledDesc = 'IS_SCHEDULED_DESC',
  ScheduledDateAsc = 'SCHEDULED_DATE_ASC',
  ScheduledDateDesc = 'SCHEDULED_DATE_DESC',
  IsPublishedAsc = 'IS_PUBLISHED_ASC',
  IsPublishedDesc = 'IS_PUBLISHED_DESC',
  PublishedDateAsc = 'PUBLISHED_DATE_ASC',
  PublishedDateDesc = 'PUBLISHED_DATE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  DocumentAsc = 'DOCUMENT_ASC',
  DocumentDesc = 'DOCUMENT_DESC'
}

export type PostsEdge = {
   __typename?: 'PostsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Post>,
};

export enum PostsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  AuthorAsc = 'AUTHOR_ASC',
  AuthorDesc = 'AUTHOR_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  SubtitleAsc = 'SUBTITLE_ASC',
  SubtitleDesc = 'SUBTITLE_DESC',
  ContentAsc = 'CONTENT_ASC',
  ContentDesc = 'CONTENT_DESC',
  TripIdAsc = 'TRIP_ID_ASC',
  TripIdDesc = 'TRIP_ID_DESC',
  JunctureIdAsc = 'JUNCTURE_ID_ASC',
  JunctureIdDesc = 'JUNCTURE_ID_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  IsDraftAsc = 'IS_DRAFT_ASC',
  IsDraftDesc = 'IS_DRAFT_DESC',
  IsScheduledAsc = 'IS_SCHEDULED_ASC',
  IsScheduledDesc = 'IS_SCHEDULED_DESC',
  ScheduledDateAsc = 'SCHEDULED_DATE_ASC',
  ScheduledDateDesc = 'SCHEDULED_DATE_DESC',
  IsPublishedAsc = 'IS_PUBLISHED_ASC',
  IsPublishedDesc = 'IS_PUBLISHED_DESC',
  PublishedDateAsc = 'PUBLISHED_DATE_ASC',
  PublishedDateDesc = 'PUBLISHED_DATE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type PostTag = Node & {
   __typename?: 'PostTag',
  nodeId: Scalars['ID'],
  name: Scalars['String'],
  tagDescription?: Maybe<Scalars['String']>,
  postToTagsByPostTagId: PostToTagsConnection,
};


export type PostTagPostToTagsByPostTagIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostToTagsOrderBy>>,
  condition?: Maybe<PostToTagCondition>,
  filter?: Maybe<PostToTagFilter>
};

export type PostTagCondition = {
  name?: Maybe<Scalars['String']>,
  tagDescription?: Maybe<Scalars['String']>,
};

export type PostTagFilter = {
  name?: Maybe<StringFilter>,
  tagDescription?: Maybe<StringFilter>,
  and?: Maybe<Array<PostTagFilter>>,
  or?: Maybe<Array<PostTagFilter>>,
  not?: Maybe<PostTagFilter>,
};

export type PostTagInput = {
  name: Scalars['String'],
  tagDescription?: Maybe<Scalars['String']>,
};

export type PostTagPatch = {
  name?: Maybe<Scalars['String']>,
  tagDescription?: Maybe<Scalars['String']>,
};

export type PostTagsConnection = {
   __typename?: 'PostTagsConnection',
  nodes: Array<Maybe<PostTag>>,
  edges: Array<PostTagsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type PostTagsEdge = {
   __typename?: 'PostTagsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<PostTag>,
};

export enum PostTagsOrderBy {
  Natural = 'NATURAL',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  TagDescriptionAsc = 'TAG_DESCRIPTION_ASC',
  TagDescriptionDesc = 'TAG_DESCRIPTION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type PostToTag = Node & {
   __typename?: 'PostToTag',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  postId: Scalars['Int'],
  postTagId: Scalars['String'],
  postByPostId?: Maybe<Post>,
  postTagByPostTagId?: Maybe<PostTag>,
};

export type PostToTagCondition = {
  id?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  postTagId?: Maybe<Scalars['String']>,
};

export type PostToTagFilter = {
  id?: Maybe<IntFilter>,
  postId?: Maybe<IntFilter>,
  postTagId?: Maybe<StringFilter>,
  and?: Maybe<Array<PostToTagFilter>>,
  or?: Maybe<Array<PostToTagFilter>>,
  not?: Maybe<PostToTagFilter>,
};

export type PostToTagInput = {
  id?: Maybe<Scalars['Int']>,
  postId: Scalars['Int'],
  postTagId: Scalars['String'],
};

export type PostToTagPatch = {
  id?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  postTagId?: Maybe<Scalars['String']>,
};

export type PostToTagsConnection = {
   __typename?: 'PostToTagsConnection',
  nodes: Array<Maybe<PostToTag>>,
  edges: Array<PostToTagsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type PostToTagsEdge = {
   __typename?: 'PostToTagsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<PostToTag>,
};

export enum PostToTagsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  PostIdAsc = 'POST_ID_ASC',
  PostIdDesc = 'POST_ID_DESC',
  PostTagIdAsc = 'POST_TAG_ID_ASC',
  PostTagIdDesc = 'POST_TAG_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Query = Node & {
   __typename?: 'Query',
  query: Query,
  nodeId: Scalars['ID'],
  node?: Maybe<Node>,
  allAccounts?: Maybe<AccountsConnection>,
  allAccountSearchIndices?: Maybe<AccountSearchIndicesConnection>,
  allConfigs?: Maybe<ConfigsConnection>,
  allCoords?: Maybe<CoordsConnection>,
  allCountries?: Maybe<CountriesConnection>,
  allEmailLists?: Maybe<EmailListsConnection>,
  allImages?: Maybe<ImagesConnection>,
  allJunctures?: Maybe<JuncturesConnection>,
  allLikes?: Maybe<LikesConnection>,
  allLoggedActions?: Maybe<LoggedActionsConnection>,
  allPosts?: Maybe<PostsConnection>,
  allPostSearchIndices?: Maybe<PostSearchIndicesConnection>,
  allPostTags?: Maybe<PostTagsConnection>,
  allPostToTags?: Maybe<PostToTagsConnection>,
  allTracks?: Maybe<TracksConnection>,
  allTrips?: Maybe<TripsConnection>,
  allTripSearchIndices?: Maybe<TripSearchIndicesConnection>,
  allUserToCountries?: Maybe<UserToCountriesConnection>,
  allAdminAccounts?: Maybe<AdminAccountsConnection>,
  allUserAccounts?: Maybe<UserAccountsConnection>,
  accountById?: Maybe<Account>,
  accountByUsername?: Maybe<Account>,
  configById?: Maybe<Config>,
  coordById?: Maybe<Coord>,
  countryByCode?: Maybe<Country>,
  emailListById?: Maybe<EmailList>,
  emailListByEmail?: Maybe<EmailList>,
  imageById?: Maybe<Image>,
  junctureById?: Maybe<Juncture>,
  likeById?: Maybe<Like>,
  loggedActionByEventId?: Maybe<LoggedAction>,
  postById?: Maybe<Post>,
  postTagByName?: Maybe<PostTag>,
  postToTagById?: Maybe<PostToTag>,
  trackById?: Maybe<Track>,
  tripById?: Maybe<Trip>,
  userToCountryById?: Maybe<UserToCountry>,
  adminAccountByAccountId?: Maybe<AdminAccount>,
  adminAccountByEmail?: Maybe<AdminAccount>,
  userAccountByAccountId?: Maybe<UserAccount>,
  userAccountByEmail?: Maybe<UserAccount>,
  currentAccount?: Maybe<Account>,
  searchAccounts: AccountSearchIndicesConnection,
  searchCountries: CountriesConnection,
  searchPosts: PostSearchIndicesConnection,
  searchTags: PostTagsConnection,
  searchTrips: TripSearchIndicesConnection,
  account?: Maybe<Account>,
  config?: Maybe<Config>,
  coord?: Maybe<Coord>,
  country?: Maybe<Country>,
  emailList?: Maybe<EmailList>,
  image?: Maybe<Image>,
  juncture?: Maybe<Juncture>,
  like?: Maybe<Like>,
  loggedAction?: Maybe<LoggedAction>,
  post?: Maybe<Post>,
  postTag?: Maybe<PostTag>,
  postToTag?: Maybe<PostToTag>,
  track?: Maybe<Track>,
  trip?: Maybe<Trip>,
  userToCountry?: Maybe<UserToCountry>,
  adminAccount?: Maybe<AdminAccount>,
  userAccount?: Maybe<UserAccount>,
};


export type QueryNodeArgs = {
  nodeId: Scalars['ID']
};


export type QueryAllAccountsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<AccountsOrderBy>>,
  condition?: Maybe<AccountCondition>,
  filter?: Maybe<AccountFilter>
};


export type QueryAllAccountSearchIndicesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<AccountSearchIndicesOrderBy>>,
  condition?: Maybe<AccountSearchIndexCondition>,
  filter?: Maybe<AccountSearchIndexFilter>
};


export type QueryAllConfigsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ConfigsOrderBy>>,
  condition?: Maybe<ConfigCondition>,
  filter?: Maybe<ConfigFilter>
};


export type QueryAllCoordsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<CoordsOrderBy>>,
  condition?: Maybe<CoordCondition>,
  filter?: Maybe<CoordFilter>
};


export type QueryAllCountriesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<CountriesOrderBy>>,
  condition?: Maybe<CountryCondition>,
  filter?: Maybe<CountryFilter>
};


export type QueryAllEmailListsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<EmailListsOrderBy>>,
  condition?: Maybe<EmailListCondition>,
  filter?: Maybe<EmailListFilter>
};


export type QueryAllImagesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ImagesOrderBy>>,
  condition?: Maybe<ImageCondition>,
  filter?: Maybe<ImageFilter>
};


export type QueryAllJuncturesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<JuncturesOrderBy>>,
  condition?: Maybe<JunctureCondition>,
  filter?: Maybe<JunctureFilter>
};


export type QueryAllLikesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<LikesOrderBy>>,
  condition?: Maybe<LikeCondition>,
  filter?: Maybe<LikeFilter>
};


export type QueryAllLoggedActionsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<LoggedActionsOrderBy>>,
  condition?: Maybe<LoggedActionCondition>,
  filter?: Maybe<LoggedActionFilter>
};


export type QueryAllPostsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostsOrderBy>>,
  condition?: Maybe<PostCondition>,
  filter?: Maybe<PostFilter>
};


export type QueryAllPostSearchIndicesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostSearchIndicesOrderBy>>,
  condition?: Maybe<PostSearchIndexCondition>,
  filter?: Maybe<PostSearchIndexFilter>
};


export type QueryAllPostTagsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostTagsOrderBy>>,
  condition?: Maybe<PostTagCondition>,
  filter?: Maybe<PostTagFilter>
};


export type QueryAllPostToTagsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostToTagsOrderBy>>,
  condition?: Maybe<PostToTagCondition>,
  filter?: Maybe<PostToTagFilter>
};


export type QueryAllTracksArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<TracksOrderBy>>,
  condition?: Maybe<TrackCondition>,
  filter?: Maybe<TrackFilter>
};


export type QueryAllTripsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<TripsOrderBy>>,
  condition?: Maybe<TripCondition>,
  filter?: Maybe<TripFilter>
};


export type QueryAllTripSearchIndicesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<TripSearchIndicesOrderBy>>,
  condition?: Maybe<TripSearchIndexCondition>,
  filter?: Maybe<TripSearchIndexFilter>
};


export type QueryAllUserToCountriesArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<UserToCountriesOrderBy>>,
  condition?: Maybe<UserToCountryCondition>,
  filter?: Maybe<UserToCountryFilter>
};


export type QueryAllAdminAccountsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<AdminAccountsOrderBy>>,
  condition?: Maybe<AdminAccountCondition>,
  filter?: Maybe<AdminAccountFilter>
};


export type QueryAllUserAccountsArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<UserAccountsOrderBy>>,
  condition?: Maybe<UserAccountCondition>,
  filter?: Maybe<UserAccountFilter>
};


export type QueryAccountByIdArgs = {
  id: Scalars['Int']
};


export type QueryAccountByUsernameArgs = {
  username: Scalars['String']
};


export type QueryConfigByIdArgs = {
  id: Scalars['Int']
};


export type QueryCoordByIdArgs = {
  id: Scalars['Int']
};


export type QueryCountryByCodeArgs = {
  code: Scalars['String']
};


export type QueryEmailListByIdArgs = {
  id: Scalars['Int']
};


export type QueryEmailListByEmailArgs = {
  email: Scalars['String']
};


export type QueryImageByIdArgs = {
  id: Scalars['Int']
};


export type QueryJunctureByIdArgs = {
  id: Scalars['Int']
};


export type QueryLikeByIdArgs = {
  id: Scalars['Int']
};


export type QueryLoggedActionByEventIdArgs = {
  eventId: Scalars['BigInt']
};


export type QueryPostByIdArgs = {
  id: Scalars['Int']
};


export type QueryPostTagByNameArgs = {
  name: Scalars['String']
};


export type QueryPostToTagByIdArgs = {
  id: Scalars['Int']
};


export type QueryTrackByIdArgs = {
  id: Scalars['Int']
};


export type QueryTripByIdArgs = {
  id: Scalars['Int']
};


export type QueryUserToCountryByIdArgs = {
  id: Scalars['Int']
};


export type QueryAdminAccountByAccountIdArgs = {
  accountId: Scalars['Int']
};


export type QueryAdminAccountByEmailArgs = {
  email: Scalars['String']
};


export type QueryUserAccountByAccountIdArgs = {
  accountId: Scalars['Int']
};


export type QueryUserAccountByEmailArgs = {
  email: Scalars['String']
};


export type QuerySearchAccountsArgs = {
  query?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  filter?: Maybe<AccountSearchIndexFilter>
};


export type QuerySearchCountriesArgs = {
  query?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  filter?: Maybe<CountryFilter>
};


export type QuerySearchPostsArgs = {
  query?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  filter?: Maybe<PostSearchIndexFilter>
};


export type QuerySearchTagsArgs = {
  query?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  filter?: Maybe<PostTagFilter>
};


export type QuerySearchTripsArgs = {
  query?: Maybe<Scalars['String']>,
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  filter?: Maybe<TripSearchIndexFilter>
};


export type QueryAccountArgs = {
  nodeId: Scalars['ID']
};


export type QueryConfigArgs = {
  nodeId: Scalars['ID']
};


export type QueryCoordArgs = {
  nodeId: Scalars['ID']
};


export type QueryCountryArgs = {
  nodeId: Scalars['ID']
};


export type QueryEmailListArgs = {
  nodeId: Scalars['ID']
};


export type QueryImageArgs = {
  nodeId: Scalars['ID']
};


export type QueryJunctureArgs = {
  nodeId: Scalars['ID']
};


export type QueryLikeArgs = {
  nodeId: Scalars['ID']
};


export type QueryLoggedActionArgs = {
  nodeId: Scalars['ID']
};


export type QueryPostArgs = {
  nodeId: Scalars['ID']
};


export type QueryPostTagArgs = {
  nodeId: Scalars['ID']
};


export type QueryPostToTagArgs = {
  nodeId: Scalars['ID']
};


export type QueryTrackArgs = {
  nodeId: Scalars['ID']
};


export type QueryTripArgs = {
  nodeId: Scalars['ID']
};


export type QueryUserToCountryArgs = {
  nodeId: Scalars['ID']
};


export type QueryAdminAccountArgs = {
  nodeId: Scalars['ID']
};


export type QueryUserAccountArgs = {
  nodeId: Scalars['ID']
};

export type RegisterAdminAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  username: Scalars['String'],
  firstName: Scalars['String'],
  lastName: Scalars['String'],
  email: Scalars['String'],
  password: Scalars['String'],
};

export type RegisterAdminAccountPayload = {
   __typename?: 'RegisterAdminAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  account?: Maybe<Account>,
  query?: Maybe<Query>,
  accountEdge?: Maybe<AccountsEdge>,
};


export type RegisterAdminAccountPayloadAccountEdgeArgs = {
  orderBy?: Maybe<Array<AccountsOrderBy>>
};

export type RegisterUserAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  username: Scalars['String'],
  firstName: Scalars['String'],
  lastName: Scalars['String'],
  email: Scalars['String'],
  password: Scalars['String'],
};

export type RegisterUserAccountPayload = {
   __typename?: 'RegisterUserAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  account?: Maybe<Account>,
  query?: Maybe<Query>,
  accountEdge?: Maybe<AccountsEdge>,
};


export type RegisterUserAccountPayloadAccountEdgeArgs = {
  orderBy?: Maybe<Array<AccountsOrderBy>>
};

export type ResetPasswordInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  email: Scalars['String'],
};

export type ResetPasswordPayload = {
   __typename?: 'ResetPasswordPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  string?: Maybe<Scalars['String']>,
  query?: Maybe<Query>,
};

export type StringFilter = {
  isNull?: Maybe<Scalars['Boolean']>,
  equalTo?: Maybe<Scalars['String']>,
  notEqualTo?: Maybe<Scalars['String']>,
  distinctFrom?: Maybe<Scalars['String']>,
  notDistinctFrom?: Maybe<Scalars['String']>,
  in?: Maybe<Array<Scalars['String']>>,
  notIn?: Maybe<Array<Scalars['String']>>,
  lessThan?: Maybe<Scalars['String']>,
  lessThanOrEqualTo?: Maybe<Scalars['String']>,
  greaterThan?: Maybe<Scalars['String']>,
  greaterThanOrEqualTo?: Maybe<Scalars['String']>,
  includes?: Maybe<Scalars['String']>,
  notIncludes?: Maybe<Scalars['String']>,
  includesInsensitive?: Maybe<Scalars['String']>,
  notIncludesInsensitive?: Maybe<Scalars['String']>,
  startsWith?: Maybe<Scalars['String']>,
  notStartsWith?: Maybe<Scalars['String']>,
  startsWithInsensitive?: Maybe<Scalars['String']>,
  notStartsWithInsensitive?: Maybe<Scalars['String']>,
  endsWith?: Maybe<Scalars['String']>,
  notEndsWith?: Maybe<Scalars['String']>,
  endsWithInsensitive?: Maybe<Scalars['String']>,
  notEndsWithInsensitive?: Maybe<Scalars['String']>,
  like?: Maybe<Scalars['String']>,
  notLike?: Maybe<Scalars['String']>,
  likeInsensitive?: Maybe<Scalars['String']>,
  notLikeInsensitive?: Maybe<Scalars['String']>,
  similarTo?: Maybe<Scalars['String']>,
  notSimilarTo?: Maybe<Scalars['String']>,
};

export type Track = Node & {
   __typename?: 'Track',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  userId: Scalars['Int'],
  trackUserId: Scalars['Int'],
  createdAt?: Maybe<Scalars['BigInt']>,
  accountByUserId?: Maybe<Account>,
  accountByTrackUserId?: Maybe<Account>,
};

export type TrackCondition = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  trackUserId?: Maybe<Scalars['Int']>,
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type TrackFilter = {
  id?: Maybe<IntFilter>,
  userId?: Maybe<IntFilter>,
  trackUserId?: Maybe<IntFilter>,
  createdAt?: Maybe<BigIntFilter>,
  and?: Maybe<Array<TrackFilter>>,
  or?: Maybe<Array<TrackFilter>>,
  not?: Maybe<TrackFilter>,
};

export type TrackInput = {
  id?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  trackUserId: Scalars['Int'],
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type TrackPatch = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  trackUserId?: Maybe<Scalars['Int']>,
  createdAt?: Maybe<Scalars['BigInt']>,
};

export type TracksConnection = {
   __typename?: 'TracksConnection',
  nodes: Array<Maybe<Track>>,
  edges: Array<TracksEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type TracksEdge = {
   __typename?: 'TracksEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Track>,
};

export enum TracksOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  TrackUserIdAsc = 'TRACK_USER_ID_ASC',
  TrackUserIdDesc = 'TRACK_USER_ID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Trip = Node & {
   __typename?: 'Trip',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  userId: Scalars['Int'],
  name: Scalars['String'],
  description?: Maybe<Scalars['String']>,
  startDate: Scalars['BigInt'],
  endDate?: Maybe<Scalars['BigInt']>,
  startLat: Scalars['BigFloat'],
  startLon: Scalars['BigFloat'],
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  accountByUserId?: Maybe<Account>,
  juncturesByTripId: JuncturesConnection,
  postsByTripId: PostsConnection,
  imagesByTripId: ImagesConnection,
  likesByTripId: LikesConnection,
  configsByFeaturedTrip1: ConfigsConnection,
};


export type TripJuncturesByTripIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<JuncturesOrderBy>>,
  condition?: Maybe<JunctureCondition>,
  filter?: Maybe<JunctureFilter>
};


export type TripPostsByTripIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<PostsOrderBy>>,
  condition?: Maybe<PostCondition>,
  filter?: Maybe<PostFilter>
};


export type TripImagesByTripIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ImagesOrderBy>>,
  condition?: Maybe<ImageCondition>,
  filter?: Maybe<ImageFilter>
};


export type TripLikesByTripIdArgs = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<LikesOrderBy>>,
  condition?: Maybe<LikeCondition>,
  filter?: Maybe<LikeFilter>
};


export type TripConfigsByFeaturedTrip1Args = {
  first?: Maybe<Scalars['Int']>,
  last?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  before?: Maybe<Scalars['Cursor']>,
  after?: Maybe<Scalars['Cursor']>,
  orderBy?: Maybe<Array<ConfigsOrderBy>>,
  condition?: Maybe<ConfigCondition>,
  filter?: Maybe<ConfigFilter>
};

export type TripCondition = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['BigInt']>,
  endDate?: Maybe<Scalars['BigInt']>,
  startLat?: Maybe<Scalars['BigFloat']>,
  startLon?: Maybe<Scalars['BigFloat']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type TripFilter = {
  id?: Maybe<IntFilter>,
  userId?: Maybe<IntFilter>,
  name?: Maybe<StringFilter>,
  description?: Maybe<StringFilter>,
  startDate?: Maybe<BigIntFilter>,
  endDate?: Maybe<BigIntFilter>,
  startLat?: Maybe<BigFloatFilter>,
  startLon?: Maybe<BigFloatFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<TripFilter>>,
  or?: Maybe<Array<TripFilter>>,
  not?: Maybe<TripFilter>,
};

export type TripInput = {
  id?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  name: Scalars['String'],
  description?: Maybe<Scalars['String']>,
  startDate: Scalars['BigInt'],
  endDate?: Maybe<Scalars['BigInt']>,
  startLat: Scalars['BigFloat'],
  startLon: Scalars['BigFloat'],
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type TripPatch = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['BigInt']>,
  endDate?: Maybe<Scalars['BigInt']>,
  startLat?: Maybe<Scalars['BigFloat']>,
  startLon?: Maybe<Scalars['BigFloat']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
};

export type TripsConnection = {
   __typename?: 'TripsConnection',
  nodes: Array<Maybe<Trip>>,
  edges: Array<TripsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type TripSearchIndex = {
   __typename?: 'TripSearchIndex',
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['BigInt']>,
  endDate?: Maybe<Scalars['BigInt']>,
  startLat?: Maybe<Scalars['BigFloat']>,
  startLon?: Maybe<Scalars['BigFloat']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  document?: Maybe<Scalars['String']>,
};

export type TripSearchIndexCondition = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  name?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['BigInt']>,
  endDate?: Maybe<Scalars['BigInt']>,
  startLat?: Maybe<Scalars['BigFloat']>,
  startLon?: Maybe<Scalars['BigFloat']>,
  createdAt?: Maybe<Scalars['BigInt']>,
  updatedAt?: Maybe<Scalars['Datetime']>,
  document?: Maybe<Scalars['String']>,
};

export type TripSearchIndexFilter = {
  id?: Maybe<IntFilter>,
  userId?: Maybe<IntFilter>,
  name?: Maybe<StringFilter>,
  description?: Maybe<StringFilter>,
  startDate?: Maybe<BigIntFilter>,
  endDate?: Maybe<BigIntFilter>,
  startLat?: Maybe<BigFloatFilter>,
  startLon?: Maybe<BigFloatFilter>,
  createdAt?: Maybe<BigIntFilter>,
  updatedAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<TripSearchIndexFilter>>,
  or?: Maybe<Array<TripSearchIndexFilter>>,
  not?: Maybe<TripSearchIndexFilter>,
};

export type TripSearchIndicesConnection = {
   __typename?: 'TripSearchIndicesConnection',
  nodes: Array<Maybe<TripSearchIndex>>,
  edges: Array<TripSearchIndicesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type TripSearchIndicesEdge = {
   __typename?: 'TripSearchIndicesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<TripSearchIndex>,
};

export enum TripSearchIndicesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  StartDateAsc = 'START_DATE_ASC',
  StartDateDesc = 'START_DATE_DESC',
  EndDateAsc = 'END_DATE_ASC',
  EndDateDesc = 'END_DATE_DESC',
  StartLatAsc = 'START_LAT_ASC',
  StartLatDesc = 'START_LAT_DESC',
  StartLonAsc = 'START_LON_ASC',
  StartLonDesc = 'START_LON_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  DocumentAsc = 'DOCUMENT_ASC',
  DocumentDesc = 'DOCUMENT_DESC'
}

export type TripsEdge = {
   __typename?: 'TripsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<Trip>,
};

export enum TripsOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  StartDateAsc = 'START_DATE_ASC',
  StartDateDesc = 'START_DATE_DESC',
  EndDateAsc = 'END_DATE_ASC',
  EndDateDesc = 'END_DATE_DESC',
  StartLatAsc = 'START_LAT_ASC',
  StartLatDesc = 'START_LAT_DESC',
  StartLonAsc = 'START_LON_ASC',
  StartLonDesc = 'START_LON_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type UpdateAccountByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  accountPatch: AccountPatch,
  id: Scalars['Int'],
};

export type UpdateAccountByUsernameInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  accountPatch: AccountPatch,
  username: Scalars['String'],
};

export type UpdateAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  accountPatch: AccountPatch,
};

export type UpdateAccountPayload = {
   __typename?: 'UpdateAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  account?: Maybe<Account>,
  query?: Maybe<Query>,
  accountEdge?: Maybe<AccountsEdge>,
};


export type UpdateAccountPayloadAccountEdgeArgs = {
  orderBy?: Maybe<Array<AccountsOrderBy>>
};

export type UpdateAdminAccountByAccountIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  adminAccountPatch: AdminAccountPatch,
  accountId: Scalars['Int'],
};

export type UpdateAdminAccountByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  adminAccountPatch: AdminAccountPatch,
  email: Scalars['String'],
};

export type UpdateAdminAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  adminAccountPatch: AdminAccountPatch,
};

export type UpdateAdminAccountPayload = {
   __typename?: 'UpdateAdminAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  adminAccount?: Maybe<AdminAccount>,
  query?: Maybe<Query>,
  accountByAccountId?: Maybe<Account>,
  adminAccountEdge?: Maybe<AdminAccountsEdge>,
};


export type UpdateAdminAccountPayloadAdminAccountEdgeArgs = {
  orderBy?: Maybe<Array<AdminAccountsOrderBy>>
};

export type UpdateConfigByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  configPatch: ConfigPatch,
  id: Scalars['Int'],
};

export type UpdateConfigInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  configPatch: ConfigPatch,
};

export type UpdateConfigPayload = {
   __typename?: 'UpdateConfigPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  config?: Maybe<Config>,
  query?: Maybe<Query>,
  postByFeaturedStory1?: Maybe<Post>,
  postByFeaturedStory2?: Maybe<Post>,
  postByFeaturedStory3?: Maybe<Post>,
  tripByFeaturedTrip1?: Maybe<Trip>,
  configEdge?: Maybe<ConfigsEdge>,
};


export type UpdateConfigPayloadConfigEdgeArgs = {
  orderBy?: Maybe<Array<ConfigsOrderBy>>
};

export type UpdateCoordByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  coordPatch: CoordPatch,
  id: Scalars['Int'],
};

export type UpdateCoordInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  coordPatch: CoordPatch,
};

export type UpdateCoordPayload = {
   __typename?: 'UpdateCoordPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  coord?: Maybe<Coord>,
  query?: Maybe<Query>,
  junctureByJunctureId?: Maybe<Juncture>,
  coordEdge?: Maybe<CoordsEdge>,
};


export type UpdateCoordPayloadCoordEdgeArgs = {
  orderBy?: Maybe<Array<CoordsOrderBy>>
};

export type UpdateCountryByCodeInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  countryPatch: CountryPatch,
  code: Scalars['String'],
};

export type UpdateCountryInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  countryPatch: CountryPatch,
};

export type UpdateCountryPayload = {
   __typename?: 'UpdateCountryPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  country?: Maybe<Country>,
  query?: Maybe<Query>,
  countryEdge?: Maybe<CountriesEdge>,
};


export type UpdateCountryPayloadCountryEdgeArgs = {
  orderBy?: Maybe<Array<CountriesOrderBy>>
};

export type UpdateEmailListByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  emailListPatch: EmailListPatch,
  email: Scalars['String'],
};

export type UpdateEmailListByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  emailListPatch: EmailListPatch,
  id: Scalars['Int'],
};

export type UpdateEmailListInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  emailListPatch: EmailListPatch,
};

export type UpdateEmailListPayload = {
   __typename?: 'UpdateEmailListPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  emailList?: Maybe<EmailList>,
  query?: Maybe<Query>,
  emailListEdge?: Maybe<EmailListsEdge>,
};


export type UpdateEmailListPayloadEmailListEdgeArgs = {
  orderBy?: Maybe<Array<EmailListsOrderBy>>
};

export type UpdateImageByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  imagePatch: ImagePatch,
  id: Scalars['Int'],
};

export type UpdateImageInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  imagePatch: ImagePatch,
};

export type UpdateImagePayload = {
   __typename?: 'UpdateImagePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  image?: Maybe<Image>,
  query?: Maybe<Query>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  accountByUserId?: Maybe<Account>,
  imageEdge?: Maybe<ImagesEdge>,
};


export type UpdateImagePayloadImageEdgeArgs = {
  orderBy?: Maybe<Array<ImagesOrderBy>>
};

export type UpdateJunctureByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  juncturePatch: JuncturePatch,
  id: Scalars['Int'],
};

export type UpdateJunctureInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  juncturePatch: JuncturePatch,
};

export type UpdateJuncturePayload = {
   __typename?: 'UpdateJuncturePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  juncture?: Maybe<Juncture>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  countryByCountry?: Maybe<Country>,
  junctureEdge?: Maybe<JuncturesEdge>,
};


export type UpdateJuncturePayloadJunctureEdgeArgs = {
  orderBy?: Maybe<Array<JuncturesOrderBy>>
};

export type UpdateLikeByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  likePatch: LikePatch,
  id: Scalars['Int'],
};

export type UpdateLikeInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  likePatch: LikePatch,
};

export type UpdateLikePayload = {
   __typename?: 'UpdateLikePayload',
  clientMutationId?: Maybe<Scalars['String']>,
  like?: Maybe<Like>,
  query?: Maybe<Query>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  postByPostId?: Maybe<Post>,
  imageByImageId?: Maybe<Image>,
  accountByUserId?: Maybe<Account>,
  likeEdge?: Maybe<LikesEdge>,
};


export type UpdateLikePayloadLikeEdgeArgs = {
  orderBy?: Maybe<Array<LikesOrderBy>>
};

export type UpdateLoggedActionByEventIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  loggedActionPatch: LoggedActionPatch,
  eventId: Scalars['BigInt'],
};

export type UpdateLoggedActionInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  loggedActionPatch: LoggedActionPatch,
};

export type UpdateLoggedActionPayload = {
   __typename?: 'UpdateLoggedActionPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  loggedAction?: Maybe<LoggedAction>,
  query?: Maybe<Query>,
  loggedActionEdge?: Maybe<LoggedActionsEdge>,
};


export type UpdateLoggedActionPayloadLoggedActionEdgeArgs = {
  orderBy?: Maybe<Array<LoggedActionsOrderBy>>
};

export type UpdatePasswordInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  userId: Scalars['Int'],
  password: Scalars['String'],
  newPassword: Scalars['String'],
};

export type UpdatePasswordPayload = {
   __typename?: 'UpdatePasswordPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  boolean?: Maybe<Scalars['Boolean']>,
  query?: Maybe<Query>,
};

export type UpdatePostByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  postPatch: PostPatch,
  id: Scalars['Int'],
};

export type UpdatePostInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  postPatch: PostPatch,
};

export type UpdatePostPayload = {
   __typename?: 'UpdatePostPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  post?: Maybe<Post>,
  query?: Maybe<Query>,
  accountByAuthor?: Maybe<Account>,
  tripByTripId?: Maybe<Trip>,
  junctureByJunctureId?: Maybe<Juncture>,
  countryByCountry?: Maybe<Country>,
  postEdge?: Maybe<PostsEdge>,
};


export type UpdatePostPayloadPostEdgeArgs = {
  orderBy?: Maybe<Array<PostsOrderBy>>
};

export type UpdatePostTagByNameInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  postTagPatch: PostTagPatch,
  name: Scalars['String'],
};

export type UpdatePostTagInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  postTagPatch: PostTagPatch,
};

export type UpdatePostTagPayload = {
   __typename?: 'UpdatePostTagPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  postTag?: Maybe<PostTag>,
  query?: Maybe<Query>,
  postTagEdge?: Maybe<PostTagsEdge>,
};


export type UpdatePostTagPayloadPostTagEdgeArgs = {
  orderBy?: Maybe<Array<PostTagsOrderBy>>
};

export type UpdatePostToTagByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  postToTagPatch: PostToTagPatch,
  id: Scalars['Int'],
};

export type UpdatePostToTagInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  postToTagPatch: PostToTagPatch,
};

export type UpdatePostToTagPayload = {
   __typename?: 'UpdatePostToTagPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  postToTag?: Maybe<PostToTag>,
  query?: Maybe<Query>,
  postByPostId?: Maybe<Post>,
  postTagByPostTagId?: Maybe<PostTag>,
  postToTagEdge?: Maybe<PostToTagsEdge>,
};


export type UpdatePostToTagPayloadPostToTagEdgeArgs = {
  orderBy?: Maybe<Array<PostToTagsOrderBy>>
};

export type UpdateTrackByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  trackPatch: TrackPatch,
  id: Scalars['Int'],
};

export type UpdateTrackInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  trackPatch: TrackPatch,
};

export type UpdateTrackPayload = {
   __typename?: 'UpdateTrackPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  track?: Maybe<Track>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  accountByTrackUserId?: Maybe<Account>,
  trackEdge?: Maybe<TracksEdge>,
};


export type UpdateTrackPayloadTrackEdgeArgs = {
  orderBy?: Maybe<Array<TracksOrderBy>>
};

export type UpdateTripByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  tripPatch: TripPatch,
  id: Scalars['Int'],
};

export type UpdateTripInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  tripPatch: TripPatch,
};

export type UpdateTripPayload = {
   __typename?: 'UpdateTripPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  trip?: Maybe<Trip>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  tripEdge?: Maybe<TripsEdge>,
};


export type UpdateTripPayloadTripEdgeArgs = {
  orderBy?: Maybe<Array<TripsOrderBy>>
};

export type UpdateUserAccountByAccountIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  userAccountPatch: UserAccountPatch,
  accountId: Scalars['Int'],
};

export type UpdateUserAccountByEmailInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  userAccountPatch: UserAccountPatch,
  email: Scalars['String'],
};

export type UpdateUserAccountInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  userAccountPatch: UserAccountPatch,
};

export type UpdateUserAccountPayload = {
   __typename?: 'UpdateUserAccountPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  userAccount?: Maybe<UserAccount>,
  query?: Maybe<Query>,
  accountByAccountId?: Maybe<Account>,
  userAccountEdge?: Maybe<UserAccountsEdge>,
};


export type UpdateUserAccountPayloadUserAccountEdgeArgs = {
  orderBy?: Maybe<Array<UserAccountsOrderBy>>
};

export type UpdateUserToCountryByIdInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  userToCountryPatch: UserToCountryPatch,
  id: Scalars['Int'],
};

export type UpdateUserToCountryInput = {
  clientMutationId?: Maybe<Scalars['String']>,
  nodeId: Scalars['ID'],
  userToCountryPatch: UserToCountryPatch,
};

export type UpdateUserToCountryPayload = {
   __typename?: 'UpdateUserToCountryPayload',
  clientMutationId?: Maybe<Scalars['String']>,
  userToCountry?: Maybe<UserToCountry>,
  query?: Maybe<Query>,
  accountByUserId?: Maybe<Account>,
  countryByCountry?: Maybe<Country>,
  userToCountryEdge?: Maybe<UserToCountriesEdge>,
};


export type UpdateUserToCountryPayloadUserToCountryEdgeArgs = {
  orderBy?: Maybe<Array<UserToCountriesOrderBy>>
};

export type UserAccount = Node & {
   __typename?: 'UserAccount',
  nodeId: Scalars['ID'],
  accountId: Scalars['Int'],
  email: Scalars['String'],
  passwordHash: Scalars['String'],
  accountByAccountId?: Maybe<Account>,
};

export type UserAccountCondition = {
  accountId?: Maybe<Scalars['Int']>,
  email?: Maybe<Scalars['String']>,
  passwordHash?: Maybe<Scalars['String']>,
};

export type UserAccountFilter = {
  accountId?: Maybe<IntFilter>,
  email?: Maybe<StringFilter>,
  passwordHash?: Maybe<StringFilter>,
  and?: Maybe<Array<UserAccountFilter>>,
  or?: Maybe<Array<UserAccountFilter>>,
  not?: Maybe<UserAccountFilter>,
};

export type UserAccountInput = {
  accountId: Scalars['Int'],
  email: Scalars['String'],
  passwordHash: Scalars['String'],
};

export type UserAccountPatch = {
  accountId?: Maybe<Scalars['Int']>,
  email?: Maybe<Scalars['String']>,
  passwordHash?: Maybe<Scalars['String']>,
};

export type UserAccountsConnection = {
   __typename?: 'UserAccountsConnection',
  nodes: Array<Maybe<UserAccount>>,
  edges: Array<UserAccountsEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type UserAccountsEdge = {
   __typename?: 'UserAccountsEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<UserAccount>,
};

export enum UserAccountsOrderBy {
  Natural = 'NATURAL',
  AccountIdAsc = 'ACCOUNT_ID_ASC',
  AccountIdDesc = 'ACCOUNT_ID_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  PasswordHashAsc = 'PASSWORD_HASH_ASC',
  PasswordHashDesc = 'PASSWORD_HASH_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type UserToCountriesConnection = {
   __typename?: 'UserToCountriesConnection',
  nodes: Array<Maybe<UserToCountry>>,
  edges: Array<UserToCountriesEdge>,
  pageInfo: PageInfo,
  totalCount: Scalars['Int'],
};

export type UserToCountriesEdge = {
   __typename?: 'UserToCountriesEdge',
  cursor?: Maybe<Scalars['Cursor']>,
  node?: Maybe<UserToCountry>,
};

export enum UserToCountriesOrderBy {
  Natural = 'NATURAL',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  CountryAsc = 'COUNTRY_ASC',
  CountryDesc = 'COUNTRY_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type UserToCountry = Node & {
   __typename?: 'UserToCountry',
  nodeId: Scalars['ID'],
  id: Scalars['Int'],
  userId: Scalars['Int'],
  country: Scalars['String'],
  createdAt?: Maybe<Scalars['Datetime']>,
  accountByUserId?: Maybe<Account>,
  countryByCountry?: Maybe<Country>,
};

export type UserToCountryCondition = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  country?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['Datetime']>,
};

export type UserToCountryFilter = {
  id?: Maybe<IntFilter>,
  userId?: Maybe<IntFilter>,
  country?: Maybe<StringFilter>,
  createdAt?: Maybe<DatetimeFilter>,
  and?: Maybe<Array<UserToCountryFilter>>,
  or?: Maybe<Array<UserToCountryFilter>>,
  not?: Maybe<UserToCountryFilter>,
};

export type UserToCountryInput = {
  id?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  country: Scalars['String'],
  createdAt?: Maybe<Scalars['Datetime']>,
};

export type UserToCountryPatch = {
  id?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>,
  country?: Maybe<Scalars['String']>,
  createdAt?: Maybe<Scalars['Datetime']>,
};

export type AccountByAuthorFragment = (
  { __typename?: 'Account' }
  & Pick<Account, 'id' | 'firstName' | 'lastName' | 'username'>
);

export type ImagesByPostIdFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'id' | 'url' | 'type'>
  & { accountByUserId: Maybe<(
    { __typename?: 'Account' }
    & Pick<Account, 'id'>
  )> }
);

export type ImageFragment = (
  { __typename?: 'Image' }
  & Pick<Image, 'id' | 'url' | 'description' | 'title' | 'type'>
  & { accountByUserId: Maybe<(
    { __typename?: 'Account' }
    & Pick<Account, 'id' | 'username'>
  )>, likesByUser: (
    { __typename?: 'LikesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Like' }
      & Pick<Like, 'id'>
    )>> }
  ), totalLikes: (
    { __typename?: 'LikesConnection' }
    & Pick<LikesConnection, 'totalCount'>
  ) }
);

export type JunctureDataFragment = (
  { __typename?: 'Juncture' }
  & Pick<Juncture, 'id' | 'name' | 'arrivalDate' | 'description' | 'city' | 'country' | 'type'>
  & { postsByJunctureId: (
    { __typename?: 'PostsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Post' }
      & Pick<Post, 'id' | 'title' | 'publishedDate'>
      & { accountByAuthor: Maybe<(
        { __typename?: 'Account' }
        & AccountByAuthorFragment
      )>, imagesByPostId: (
        { __typename?: 'ImagesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Image' }
          & Pick<Image, 'id' | 'url' | 'type'>
          & { accountByUserId: Maybe<(
            { __typename?: 'Account' }
            & Pick<Account, 'id'>
          )> }
        )>> }
      ) }
    )>> }
  ), imagesByJunctureId: (
    { __typename?: 'ImagesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Image' }
      & Pick<Image, 'id' | 'postId' | 'type' | 'url' | 'description'>
      & { accountByUserId: Maybe<(
        { __typename?: 'Account' }
        & Pick<Account, 'id' | 'username'>
      )>, likesByUser: (
        { __typename?: 'LikesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Like' }
          & Pick<Like, 'id'>
        )>> }
      ), totalLikes: (
        { __typename?: 'LikesConnection' }
        & Pick<LikesConnection, 'totalCount'>
      ) }
    )>> }
  ), likesByUser: (
    { __typename?: 'LikesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Like' }
      & Pick<Like, 'id'>
    )>> }
  ), totalLikes: (
    { __typename?: 'LikesConnection' }
    & Pick<LikesConnection, 'totalCount'>
  ) }
);

export type PostDataFragment = (
  { __typename?: 'Post' }
  & Pick<Post, 'id' | 'title' | 'subtitle' | 'content' | 'publishedDate' | 'updatedAt'>
);

export type TripsByUserIdFragment = (
  { __typename?: 'Trip' }
  & Pick<Trip, 'id' | 'name' | 'startDate' | 'endDate'>
  & { imagesByTripId: (
    { __typename?: 'ImagesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Image' }
      & Pick<Image, 'url'>
    )>> }
  ) }
);

export type AuthAdminAccountMutationVariables = {
  email: Scalars['String'],
  password: Scalars['String']
};


export type AuthAdminAccountMutation = (
  { __typename?: 'Mutation' }
  & { authenticateAdminAccount: Maybe<(
    { __typename?: 'AuthenticateAdminAccountPayload' }
    & Pick<AuthenticateAdminAccountPayload, 'jwtToken'>
  )> }
);

export type AuthUserAccountMutationVariables = {
  email: Scalars['String'],
  password: Scalars['String']
};


export type AuthUserAccountMutation = (
  { __typename?: 'Mutation' }
  & { authenticateUserAccount: Maybe<(
    { __typename?: 'AuthenticateUserAccountPayload' }
    & Pick<AuthenticateUserAccountPayload, 'jwtToken'>
  )> }
);

export type CreateEmailListEntryMutationVariables = {
  email: Scalars['String']
};


export type CreateEmailListEntryMutation = (
  { __typename?: 'Mutation' }
  & { createEmailList: Maybe<(
    { __typename?: 'CreateEmailListPayload' }
    & Pick<CreateEmailListPayload, 'clientMutationId'>
  )> }
);

export type CreateImageMutationVariables = {
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  userId: Scalars['Int'],
  type: ImageType,
  url: Scalars['String'],
  title?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>
};


export type CreateImageMutation = (
  { __typename?: 'Mutation' }
  & { createImage: Maybe<(
    { __typename?: 'CreateImagePayload' }
    & Pick<CreateImagePayload, 'clientMutationId'>
  )> }
);

export type CreateJunctureMutationVariables = {
  userId: Scalars['Int'],
  tripId: Scalars['Int'],
  type: JunctureType,
  name: Scalars['String'],
  arrivalDate: Scalars['BigInt'],
  description?: Maybe<Scalars['String']>,
  lat: Scalars['BigFloat'],
  lon: Scalars['BigFloat'],
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  markerImg?: Maybe<Scalars['String']>
};


export type CreateJunctureMutation = (
  { __typename?: 'Mutation' }
  & { createJuncture: Maybe<(
    { __typename?: 'CreateJuncturePayload' }
    & { juncture: Maybe<(
      { __typename?: 'Juncture' }
      & Pick<Juncture, 'id'>
    )> }
  )> }
);

export type CreateLikeMutationVariables = {
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  postId?: Maybe<Scalars['Int']>,
  imageId?: Maybe<Scalars['Int']>,
  userId: Scalars['Int']
};


export type CreateLikeMutation = (
  { __typename?: 'Mutation' }
  & { createLike: Maybe<(
    { __typename?: 'CreateLikePayload' }
    & { likeEdge: Maybe<(
      { __typename?: 'LikesEdge' }
      & { node: Maybe<(
        { __typename?: 'Like' }
        & Pick<Like, 'id'>
      )> }
    )> }
  )> }
);

export type CreatePostMutationVariables = {
  author: Scalars['Int'],
  title: Scalars['String'],
  subtitle: Scalars['String'],
  content: Scalars['String'],
  isDraft: Scalars['Boolean'],
  isScheduled: Scalars['Boolean'],
  isPublished: Scalars['Boolean'],
  tripId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  junctureId?: Maybe<Scalars['Int']>,
  scheduledDate?: Maybe<Scalars['BigInt']>,
  publishedDate?: Maybe<Scalars['BigInt']>
};


export type CreatePostMutation = (
  { __typename?: 'Mutation' }
  & { createPost: Maybe<(
    { __typename?: 'CreatePostPayload' }
    & { post: Maybe<(
      { __typename?: 'Post' }
      & Pick<Post, 'id'>
    )> }
  )> }
);

export type CreatePostTagMutationVariables = {
  name: Scalars['String'],
  tagDescription?: Maybe<Scalars['String']>
};


export type CreatePostTagMutation = (
  { __typename?: 'Mutation' }
  & { createPostTag: Maybe<(
    { __typename?: 'CreatePostTagPayload' }
    & { postTag: Maybe<(
      { __typename?: 'PostTag' }
      & Pick<PostTag, 'name'>
    )> }
  )> }
);

export type CreateTrackMutationVariables = {
  userId: Scalars['Int'],
  trackUserId: Scalars['Int']
};


export type CreateTrackMutation = (
  { __typename?: 'Mutation' }
  & { createTrack: Maybe<(
    { __typename?: 'CreateTrackPayload' }
    & Pick<CreateTrackPayload, 'clientMutationId'>
  )> }
);

export type CreateTripMutationVariables = {
  userId: Scalars['Int'],
  name: Scalars['String'],
  description?: Maybe<Scalars['String']>,
  startDate: Scalars['BigInt'],
  endDate?: Maybe<Scalars['BigInt']>,
  startLat: Scalars['BigFloat'],
  startLon: Scalars['BigFloat']
};


export type CreateTripMutation = (
  { __typename?: 'Mutation' }
  & { createTrip: Maybe<(
    { __typename?: 'CreateTripPayload' }
    & { trip: Maybe<(
      { __typename?: 'Trip' }
      & Pick<Trip, 'id'>
    )> }
  )> }
);

export type CreateUserToCountryMutationVariables = {
  code: Scalars['String'],
  userId: Scalars['Int']
};


export type CreateUserToCountryMutation = (
  { __typename?: 'Mutation' }
  & { createUserToCountry: Maybe<(
    { __typename?: 'CreateUserToCountryPayload' }
    & Pick<CreateUserToCountryPayload, 'clientMutationId'>
  )> }
);

export type DeleteAccountMutationVariables = {
  userId: Scalars['Int']
};


export type DeleteAccountMutation = (
  { __typename?: 'Mutation' }
  & { deleteAccountById: Maybe<(
    { __typename?: 'DeleteAccountPayload' }
    & Pick<DeleteAccountPayload, 'clientMutationId'>
  )> }
);

export type DeleteImageByIdMutationVariables = {
  id: Scalars['Int']
};


export type DeleteImageByIdMutation = (
  { __typename?: 'Mutation' }
  & { deleteImageById: Maybe<(
    { __typename?: 'DeleteImagePayload' }
    & Pick<DeleteImagePayload, 'clientMutationId'>
  )> }
);

export type DeleteJunctureByIdMutationVariables = {
  junctureId: Scalars['Int']
};


export type DeleteJunctureByIdMutation = (
  { __typename?: 'Mutation' }
  & { deleteJunctureById: Maybe<(
    { __typename?: 'DeleteJuncturePayload' }
    & Pick<DeleteJuncturePayload, 'clientMutationId'>
  )> }
);

export type DeleteLikeByIdMutationVariables = {
  likeId: Scalars['Int']
};


export type DeleteLikeByIdMutation = (
  { __typename?: 'Mutation' }
  & { deleteLikeById: Maybe<(
    { __typename?: 'DeleteLikePayload' }
    & Pick<DeleteLikePayload, 'clientMutationId'>
  )> }
);

export type DeletePostByIdMutationVariables = {
  id: Scalars['Int']
};


export type DeletePostByIdMutation = (
  { __typename?: 'Mutation' }
  & { deletePostById: Maybe<(
    { __typename?: 'DeletePostPayload' }
    & { post: Maybe<(
      { __typename?: 'Post' }
      & Pick<Post, 'title'>
    )> }
  )> }
);

export type DeletePostToTagByIdMutationVariables = {
  id: Scalars['Int']
};


export type DeletePostToTagByIdMutation = (
  { __typename?: 'Mutation' }
  & { deletePostToTagById: Maybe<(
    { __typename?: 'DeletePostToTagPayload' }
    & Pick<DeletePostToTagPayload, 'clientMutationId'>
  )> }
);

export type DeleteTrackByIdMutationVariables = {
  trackId: Scalars['Int']
};


export type DeleteTrackByIdMutation = (
  { __typename?: 'Mutation' }
  & { deleteTrackById: Maybe<(
    { __typename?: 'DeleteTrackPayload' }
    & Pick<DeleteTrackPayload, 'clientMutationId'>
  )> }
);

export type DeleteTripByIdMutationVariables = {
  tripId: Scalars['Int']
};


export type DeleteTripByIdMutation = (
  { __typename?: 'Mutation' }
  & { deleteTripById: Maybe<(
    { __typename?: 'DeleteTripPayload' }
    & Pick<DeleteTripPayload, 'clientMutationId'>
  )> }
);

export type RegisterAdminAccountMutationVariables = {
  username: Scalars['String'],
  firstName: Scalars['String'],
  lastName: Scalars['String'],
  password: Scalars['String'],
  email: Scalars['String']
};


export type RegisterAdminAccountMutation = (
  { __typename?: 'Mutation' }
  & { registerAdminAccount: Maybe<(
    { __typename?: 'RegisterAdminAccountPayload' }
    & { account: Maybe<(
      { __typename?: 'Account' }
      & AccountByAuthorFragment
    )> }
  )> }
);

export type RegisterUserAccountMutationVariables = {
  username: Scalars['String'],
  firstName: Scalars['String'],
  lastName: Scalars['String'],
  password: Scalars['String'],
  email: Scalars['String']
};


export type RegisterUserAccountMutation = (
  { __typename?: 'Mutation' }
  & { registerUserAccount: Maybe<(
    { __typename?: 'RegisterUserAccountPayload' }
    & { account: Maybe<(
      { __typename?: 'Account' }
      & AccountByAuthorFragment
    )> }
  )> }
);

export type ResetPasswordMutationVariables = {
  email: Scalars['String']
};


export type ResetPasswordMutation = (
  { __typename?: 'Mutation' }
  & { resetPassword: Maybe<(
    { __typename?: 'ResetPasswordPayload' }
    & Pick<ResetPasswordPayload, 'string'>
  )> }
);

export type UpdateAccountByIdMutationVariables = {
  id: Scalars['Int'],
  firstName: Scalars['String'],
  lastName: Scalars['String'],
  userStatus?: Maybe<Scalars['String']>,
  heroPhoto?: Maybe<Scalars['String']>,
  profilePhoto?: Maybe<Scalars['String']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  autoUpdate: Scalars['Boolean']
};


export type UpdateAccountByIdMutation = (
  { __typename?: 'Mutation' }
  & { updateAccountById: Maybe<(
    { __typename?: 'UpdateAccountPayload' }
    & { account: Maybe<(
      { __typename?: 'Account' }
      & Pick<Account, 'userStatus' | 'heroPhoto' | 'profilePhoto' | 'city' | 'country' | 'autoUpdateLocation'>
      & AccountByAuthorFragment
    )> }
  )> }
);

export type UpdateConfigMutationVariables = {
  primaryColor: Scalars['String'],
  secondaryColor: Scalars['String'],
  tagline: Scalars['String'],
  heroBanner: Scalars['String']
};


export type UpdateConfigMutation = (
  { __typename?: 'Mutation' }
  & { updateConfigById: Maybe<(
    { __typename?: 'UpdateConfigPayload' }
    & Pick<UpdateConfigPayload, 'clientMutationId'>
  )> }
);

export type UpdateJunctureMutationVariables = {
  junctureId: Scalars['Int'],
  userId?: Maybe<Scalars['Int']>,
  tripId?: Maybe<Scalars['Int']>,
  type?: Maybe<JunctureType>,
  name?: Maybe<Scalars['String']>,
  arrivalDate?: Maybe<Scalars['BigInt']>,
  description?: Maybe<Scalars['String']>,
  lat?: Maybe<Scalars['BigFloat']>,
  lon?: Maybe<Scalars['BigFloat']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  markerImg?: Maybe<Scalars['String']>
};


export type UpdateJunctureMutation = (
  { __typename?: 'Mutation' }
  & { updateJunctureById: Maybe<(
    { __typename?: 'UpdateJuncturePayload' }
    & { juncture: Maybe<(
      { __typename?: 'Juncture' }
      & Pick<Juncture, 'id'>
    )> }
  )> }
);

export type UpdatePasswordMutationVariables = {
  userId: Scalars['Int'],
  password: Scalars['String'],
  newPassword: Scalars['String']
};


export type UpdatePasswordMutation = (
  { __typename?: 'Mutation' }
  & { updatePassword: Maybe<(
    { __typename?: 'UpdatePasswordPayload' }
    & Pick<UpdatePasswordPayload, 'boolean'>
  )> }
);

export type UpdatePostByIdMutationVariables = {
  postId: Scalars['Int'],
  title?: Maybe<Scalars['String']>,
  subtitle?: Maybe<Scalars['String']>,
  content?: Maybe<Scalars['String']>,
  tripId?: Maybe<Scalars['Int']>,
  junctureId?: Maybe<Scalars['Int']>,
  city?: Maybe<Scalars['String']>,
  country?: Maybe<Scalars['String']>,
  isDraft?: Maybe<Scalars['Boolean']>,
  isScheduled?: Maybe<Scalars['Boolean']>,
  isPublished?: Maybe<Scalars['Boolean']>,
  scheduledDate?: Maybe<Scalars['BigInt']>,
  publishedDate?: Maybe<Scalars['BigInt']>
};


export type UpdatePostByIdMutation = (
  { __typename?: 'Mutation' }
  & { updatePostById: Maybe<(
    { __typename?: 'UpdatePostPayload' }
    & { post: Maybe<(
      { __typename?: 'Post' }
      & Pick<Post, 'id'>
    )> }
  )> }
);

export type UpdateTripByIdMutationVariables = {
  tripId: Scalars['Int'],
  name?: Maybe<Scalars['String']>,
  description?: Maybe<Scalars['String']>,
  startDate?: Maybe<Scalars['BigInt']>,
  endDate?: Maybe<Scalars['BigInt']>,
  startLat?: Maybe<Scalars['BigFloat']>,
  startLon?: Maybe<Scalars['BigFloat']>
};


export type UpdateTripByIdMutation = (
  { __typename?: 'Mutation' }
  & { updateTripById: Maybe<(
    { __typename?: 'UpdateTripPayload' }
    & { trip: Maybe<(
      { __typename?: 'Trip' }
      & Pick<Trip, 'id'>
    )> }
  )> }
);

export type AccountByUsernameQueryVariables = {
  username: Scalars['String'],
  userId?: Maybe<Scalars['Int']>
};


export type AccountByUsernameQuery = (
  { __typename?: 'Query' }
  & { accountByUsername: Maybe<(
    { __typename?: 'Account' }
    & Pick<Account, 'id' | 'username' | 'firstName' | 'lastName' | 'profilePhoto' | 'heroPhoto' | 'city' | 'country' | 'userStatus'>
    & { postsByAuthor: (
      { __typename?: 'PostsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Post' }
        & Pick<Post, 'id' | 'title'>
        & { accountByAuthor: Maybe<(
          { __typename?: 'Account' }
          & AccountByAuthorFragment
        )>, imagesByPostId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & Pick<Image, 'url' | 'type'>
          )>> }
        ) }
      )>> }
    ), imagesByUserId: (
      { __typename?: 'ImagesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Image' }
        & Pick<Image, 'id' | 'url' | 'title' | 'type' | 'description'>
        & { accountByUserId: Maybe<(
          { __typename?: 'Account' }
          & Pick<Account, 'id' | 'username'>
        )>, likesByUser: (
          { __typename?: 'LikesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Like' }
            & Pick<Like, 'id'>
          )>> }
        ), totalLikes: (
          { __typename?: 'LikesConnection' }
          & Pick<LikesConnection, 'totalCount'>
        ) }
      )>> }
    ), tripsByUserId: (
      { __typename?: 'TripsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Trip' }
        & Pick<Trip, 'id'>
        & TripsByUserIdFragment
      )>> }
    ), totalJunctureCount: (
      { __typename?: 'JuncturesConnection' }
      & Pick<JuncturesConnection, 'totalCount'>
    ), totalImageCount: (
      { __typename?: 'ImagesConnection' }
      & Pick<ImagesConnection, 'totalCount'>
    ), totalPostCount: (
      { __typename?: 'PostsConnection' }
      & Pick<PostsConnection, 'totalCount'>
    ), totalTripCount: (
      { __typename?: 'TripsConnection' }
      & Pick<TripsConnection, 'totalCount'>
    ), tracksByUserId: (
      { __typename?: 'TracksConnection' }
      & Pick<TracksConnection, 'totalCount'>
    ), tracksByTrackUserId: (
      { __typename?: 'TracksConnection' }
      & Pick<TracksConnection, 'totalCount'>
    ), userToCountriesByUserId: (
      { __typename?: 'UserToCountriesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'UserToCountry' }
        & { countryByCountry: Maybe<(
          { __typename?: 'Country' }
          & Pick<Country, 'code' | 'name'>
        )> }
      )>> }
    ) }
  )> }
);

export type AllConfigsQueryVariables = {};


export type AllConfigsQuery = (
  { __typename?: 'Query' }
  & { allConfigs: Maybe<(
    { __typename?: 'ConfigsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Config' }
      & Pick<Config, 'primaryColor' | 'secondaryColor' | 'tagline' | 'heroBanner'>
      & { postByFeaturedStory1: Maybe<(
        { __typename?: 'Post' }
        & Pick<Post, 'id' | 'title' | 'subtitle'>
        & { imagesByPostId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & Pick<Image, 'url'>
          )>> }
        ) }
      )>, postByFeaturedStory2: Maybe<(
        { __typename?: 'Post' }
        & Pick<Post, 'id' | 'title' | 'subtitle'>
        & { imagesByPostId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & Pick<Image, 'url'>
          )>> }
        ) }
      )>, postByFeaturedStory3: Maybe<(
        { __typename?: 'Post' }
        & Pick<Post, 'id' | 'title' | 'subtitle'>
        & { imagesByPostId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & Pick<Image, 'url'>
          )>> }
        ) }
      )>, tripByFeaturedTrip1: Maybe<(
        { __typename?: 'Trip' }
        & Pick<Trip, 'id' | 'name' | 'startDate' | 'endDate'>
        & { imagesByTripId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & Pick<Image, 'url'>
          )>> }
        ) }
      )> }
    )>> }
  )> }
);

export type GetAllCountriesQueryVariables = {};


export type GetAllCountriesQuery = (
  { __typename?: 'Query' }
  & { allCountries: Maybe<(
    { __typename?: 'CountriesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Country' }
      & Pick<Country, 'code' | 'name'>
    )>> }
  )> }
);

export type AllImagesByTripQueryVariables = {
  tripId: Scalars['Int'],
  first?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>
};


export type AllImagesByTripQuery = (
  { __typename?: 'Query' }
  & { allImages: Maybe<(
    { __typename?: 'ImagesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Image' }
      & ImageFragment
    )>> }
  )> }
);

export type AllImagesByUserQueryVariables = {
  userId?: Maybe<Scalars['Int']>,
  first?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>
};


export type AllImagesByUserQuery = (
  { __typename?: 'Query' }
  & { allImages: Maybe<(
    { __typename?: 'ImagesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Image' }
      & ImageFragment
    )>> }
  )> }
);

export type RecentImagesQueryVariables = {
  last?: Maybe<Scalars['Int']>,
  userId?: Maybe<Scalars['Int']>
};


export type RecentImagesQuery = (
  { __typename?: 'Query' }
  & { allImages: Maybe<(
    { __typename?: 'ImagesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Image' }
      & ImageFragment
    )>> }
  )> }
);

export type AllPostTagsQueryVariables = {};


export type AllPostTagsQuery = (
  { __typename?: 'Query' }
  & { allPostTags: Maybe<(
    { __typename?: 'PostTagsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PostTag' }
      & Pick<PostTag, 'name' | 'tagDescription'>
    )>> }
  )> }
);

export type AllPostToTagsQueryVariables = {
  tagId?: Maybe<Scalars['String']>
};


export type AllPostToTagsQuery = (
  { __typename?: 'Query' }
  & { allPostToTags: Maybe<(
    { __typename?: 'PostToTagsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PostToTag' }
      & { postByPostId: Maybe<(
        { __typename?: 'Post' }
        & Pick<Post, 'id' | 'title' | 'subtitle' | 'createdAt'>
        & { accountByAuthor: Maybe<(
          { __typename?: 'Account' }
          & AccountByAuthorFragment
        )>, imagesByPostId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & Pick<Image, 'title'>
            & ImagesByPostIdFragment
          )>> }
        ) }
      )> }
    )>> }
  )> }
);

export type AllPostsByUserQueryVariables = {
  author: Scalars['Int']
};


export type AllPostsByUserQuery = (
  { __typename?: 'Query' }
  & { allPosts: Maybe<(
    { __typename?: 'PostsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Post' }
      & Pick<Post, 'id' | 'title' | 'publishedDate' | 'isDraft' | 'isScheduled' | 'isPublished'>
    )>> }
  )> }
);

export type AllPublishedPostsQueryVariables = {
  quantity?: Maybe<Scalars['Int']>,
  offset?: Maybe<Scalars['Int']>
};


export type AllPublishedPostsQuery = (
  { __typename?: 'Query' }
  & { allPosts: Maybe<(
    { __typename?: 'PostsConnection' }
    & Pick<PostsConnection, 'totalCount'>
    & { nodes: Array<Maybe<(
      { __typename?: 'Post' }
      & { accountByAuthor: Maybe<(
        { __typename?: 'Account' }
        & AccountByAuthorFragment
      )>, imagesByPostId: (
        { __typename?: 'ImagesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Image' }
          & ImagesByPostIdFragment
        )>> }
      ) }
      & PostDataFragment
    )>> }
  )> }
);

export type CheckTrackingByUserQueryVariables = {
  trackedUser: Scalars['Int'],
  trackingUser: Scalars['Int']
};


export type CheckTrackingByUserQuery = (
  { __typename?: 'Query' }
  & { accountById: Maybe<(
    { __typename?: 'Account' }
    & { tracksByTrackUserId: (
      { __typename?: 'TracksConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Track' }
        & Pick<Track, 'id'>
      )>> }
    ) }
  )> }
);

export type CurrentAccountQueryVariables = {};


export type CurrentAccountQuery = (
  { __typename?: 'Query' }
  & { currentAccount: Maybe<(
    { __typename?: 'Account' }
    & Pick<Account, 'id' | 'firstName' | 'lastName' | 'username' | 'profilePhoto' | 'heroPhoto' | 'userStatus' | 'city' | 'country' | 'autoUpdateLocation' | 'autoUpdateVisited'>
    & { userToCountriesByUserId: (
      { __typename?: 'UserToCountriesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'UserToCountry' }
        & Pick<UserToCountry, 'id'>
        & { countryByCountry: Maybe<(
          { __typename?: 'Country' }
          & Pick<Country, 'code' | 'name'>
        )> }
      )>> }
    ) }
  )> }
);

export type FullJunctureByIdQueryVariables = {
  id: Scalars['Int'],
  userId?: Maybe<Scalars['Int']>
};


export type FullJunctureByIdQuery = (
  { __typename?: 'Query' }
  & { junctureById: Maybe<(
    { __typename?: 'Juncture' }
    & Pick<Juncture, 'lat' | 'lon' | 'markerImg' | 'userId'>
    & { coordsByJunctureId: (
      { __typename?: 'CoordsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Coord' }
        & Pick<Coord, 'id' | 'lat' | 'lon' | 'elevation' | 'coordTime'>
      )>> }
    ), tripByTripId: Maybe<(
      { __typename?: 'Trip' }
      & Pick<Trip, 'id' | 'name'>
      & { juncturesByTripId: (
        { __typename?: 'JuncturesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Juncture' }
          & Pick<Juncture, 'name' | 'id'>
        )>> }
      ) }
    )>, likesByUser: (
      { __typename?: 'LikesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Like' }
        & Pick<Like, 'id'>
      )>> }
    ), totalLikes: (
      { __typename?: 'LikesConnection' }
      & Pick<LikesConnection, 'totalCount'>
    ) }
    & JunctureDataFragment
  )> }
);

export type PartialJunctureByIdQueryVariables = {
  id: Scalars['Int'],
  userId?: Maybe<Scalars['Int']>
};


export type PartialJunctureByIdQuery = (
  { __typename?: 'Query' }
  & { junctureById: Maybe<(
    { __typename?: 'Juncture' }
    & JunctureDataFragment
  )> }
);

export type PostByIdQueryVariables = {
  id: Scalars['Int'],
  userId?: Maybe<Scalars['Int']>
};


export type PostByIdQuery = (
  { __typename?: 'Query' }
  & { postById: Maybe<(
    { __typename?: 'Post' }
    & Pick<Post, 'id' | 'title' | 'subtitle' | 'content' | 'createdAt' | 'updatedAt' | 'scheduledDate' | 'publishedDate' | 'isDraft' | 'isScheduled' | 'tripId' | 'junctureId' | 'city' | 'country'>
    & { accountByAuthor: Maybe<(
      { __typename?: 'Account' }
      & AccountByAuthorFragment
    )>, postToTagsByPostId: (
      { __typename?: 'PostToTagsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'PostToTag' }
        & { postTagByPostTagId: Maybe<(
          { __typename?: 'PostTag' }
          & Pick<PostTag, 'name'>
          & { postToTagsByPostTagId: (
            { __typename?: 'PostToTagsConnection' }
            & { nodes: Array<Maybe<(
              { __typename?: 'PostToTag' }
              & { postByPostId: Maybe<(
                { __typename?: 'Post' }
                & Pick<Post, 'id' | 'title' | 'createdAt'>
                & { accountByAuthor: Maybe<(
                  { __typename?: 'Account' }
                  & AccountByAuthorFragment
                )>, imagesByPostId: (
                  { __typename?: 'ImagesConnection' }
                  & { nodes: Array<Maybe<(
                    { __typename?: 'Image' }
                    & ImagesByPostIdFragment
                  )>> }
                ) }
              )> }
            )>> }
          ) }
        )> }
      )>> }
    ), imagesByPostId: (
      { __typename?: 'ImagesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Image' }
        & Pick<Image, 'id' | 'type' | 'url' | 'description' | 'title'>
        & { accountByUserId: Maybe<(
          { __typename?: 'Account' }
          & Pick<Account, 'id' | 'username'>
        )>, likesByUser: (
          { __typename?: 'LikesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Like' }
            & Pick<Like, 'id'>
          )>> }
        ), totalLikes: (
          { __typename?: 'LikesConnection' }
          & Pick<LikesConnection, 'totalCount'>
        ) }
      )>> }
    ), likesByUser: (
      { __typename?: 'LikesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Like' }
        & Pick<Like, 'id'>
      )>> }
    ), totalLikes: (
      { __typename?: 'LikesConnection' }
      & Pick<LikesConnection, 'totalCount'>
    ) }
  )> }
);

export type PostsByTripQueryVariables = {
  id: Scalars['Int']
};


export type PostsByTripQuery = (
  { __typename?: 'Query' }
  & { tripById: Maybe<(
    { __typename?: 'Trip' }
    & { postsByTripId: (
      { __typename?: 'PostsConnection' }
      & Pick<PostsConnection, 'totalCount'>
      & { nodes: Array<Maybe<(
        { __typename?: 'Post' }
        & Pick<Post, 'id' | 'title' | 'subtitle' | 'createdAt'>
        & { accountByAuthor: Maybe<(
          { __typename?: 'Account' }
          & AccountByAuthorFragment
        )>, imagesByPostId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & ImagesByPostIdFragment
          )>> }
        ) }
      )>> }
    ) }
  )> }
);

export type RecentUserActivityQueryVariables = {
  username: Scalars['String']
};


export type RecentUserActivityQuery = (
  { __typename?: 'Query' }
  & { accountByUsername: Maybe<(
    { __typename?: 'Account' }
    & { tripsByUserId: (
      { __typename?: 'TripsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Trip' }
        & TripsByUserIdFragment
      )>> }
    ), juncturesByUserId: (
      { __typename?: 'JuncturesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Juncture' }
        & Pick<Juncture, 'id' | 'name' | 'markerImg' | 'city' | 'country' | 'type'>
      )>> }
    ), postsByAuthor: (
      { __typename?: 'PostsConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Post' }
        & Pick<Post, 'title' | 'id' | 'createdAt'>
        & { imagesByPostId: (
          { __typename?: 'ImagesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Image' }
            & Pick<Image, 'url'>
          )>> }
        ) }
      )>> }
    ) }
  )> }
);

export type SearchSiteQueryVariables = {
  query: Scalars['String']
};


export type SearchSiteQuery = (
  { __typename?: 'Query' }
  & { searchTrips: (
    { __typename?: 'TripSearchIndicesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'TripSearchIndex' }
      & Pick<TripSearchIndex, 'id' | 'name'>
    )>> }
  ), searchPosts: (
    { __typename?: 'PostSearchIndicesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PostSearchIndex' }
      & Pick<PostSearchIndex, 'id' | 'title' | 'subtitle' | 'createdAt'>
    )>> }
  ), searchAccounts: (
    { __typename?: 'AccountSearchIndicesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'AccountSearchIndex' }
      & Pick<AccountSearchIndex, 'profilePhoto'>
    )>> }
  ) }
);

export type SearchTagsQueryVariables = {
  query: Scalars['String']
};


export type SearchTagsQuery = (
  { __typename?: 'Query' }
  & { searchTags: (
    { __typename?: 'PostTagsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PostTag' }
      & Pick<PostTag, 'name'>
    )>> }
  ) }
);

export type SearchCountriesQueryVariables = {
  query: Scalars['String']
};


export type SearchCountriesQuery = (
  { __typename?: 'Query' }
  & { searchCountries: (
    { __typename?: 'CountriesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Country' }
      & Pick<Country, 'code' | 'name'>
    )>> }
  ) }
);

export type SearchPostsQueryVariables = {
  query: Scalars['String'],
  postStatus?: Maybe<Scalars['String']>
};


export type SearchPostsQuery = (
  { __typename?: 'Query' }
  & { searchPosts: (
    { __typename?: 'PostSearchIndicesConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PostSearchIndex' }
      & Pick<PostSearchIndex, 'id' | 'title' | 'updatedAt' | 'isDraft' | 'isScheduled' | 'isPublished'>
    )>> }
  ) }
);

export type TagsByNameQueryVariables = {
  tagName: Scalars['String']
};


export type TagsByNameQuery = (
  { __typename?: 'Query' }
  & { allPostTags: Maybe<(
    { __typename?: 'PostTagsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'PostTag' }
      & Pick<PostTag, 'tagDescription'>
    )>> }
  )> }
);

export type TripByIdQueryVariables = {
  id: Scalars['Int'],
  userId?: Maybe<Scalars['Int']>
};


export type TripByIdQuery = (
  { __typename?: 'Query' }
  & { tripById: Maybe<(
    { __typename?: 'Trip' }
    & Pick<Trip, 'id' | 'name' | 'startDate' | 'endDate' | 'startLat' | 'startLon' | 'description'>
    & { juncturesByTripId: (
      { __typename?: 'JuncturesConnection' }
      & Pick<JuncturesConnection, 'totalCount'>
      & { nodes: Array<Maybe<(
        { __typename?: 'Juncture' }
        & Pick<Juncture, 'name' | 'lat' | 'lon' | 'arrivalDate' | 'id' | 'markerImg' | 'description' | 'type' | 'city' | 'country'>
        & { coordsByJunctureId: (
          { __typename?: 'CoordsConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Coord' }
            & Pick<Coord, 'lat' | 'lon' | 'elevation' | 'coordTime'>
          )>> }
        ) }
      )>> }
    ), accountByUserId: Maybe<(
      { __typename?: 'Account' }
      & Pick<Account, 'profilePhoto'>
      & AccountByAuthorFragment
    )>, imagesByTripId: (
      { __typename?: 'ImagesConnection' }
      & Pick<ImagesConnection, 'totalCount'>
    ), gallery: (
      { __typename?: 'ImagesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Image' }
        & Pick<Image, 'id' | 'url' | 'title' | 'type' | 'description'>
        & { accountByUserId: Maybe<(
          { __typename?: 'Account' }
          & Pick<Account, 'id' | 'username'>
        )>, likesByUser: (
          { __typename?: 'LikesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Like' }
            & Pick<Like, 'id'>
          )>> }
        ), totalLikes: (
          { __typename?: 'LikesConnection' }
          & Pick<LikesConnection, 'totalCount'>
        ) }
      )>> }
    ), banners: (
      { __typename?: 'ImagesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Image' }
        & Pick<Image, 'id' | 'url' | 'title' | 'type' | 'description'>
        & { accountByUserId: Maybe<(
          { __typename?: 'Account' }
          & Pick<Account, 'id' | 'username'>
        )>, likesByUser: (
          { __typename?: 'LikesConnection' }
          & { nodes: Array<Maybe<(
            { __typename?: 'Like' }
            & Pick<Like, 'id'>
          )>> }
        ), totalLikes: (
          { __typename?: 'LikesConnection' }
          & Pick<LikesConnection, 'totalCount'>
        ) }
      )>> }
    ), likesByUser: (
      { __typename?: 'LikesConnection' }
      & { nodes: Array<Maybe<(
        { __typename?: 'Like' }
        & Pick<Like, 'id'>
      )>> }
    ), totalLikes: (
      { __typename?: 'LikesConnection' }
      & Pick<LikesConnection, 'totalCount'>
    ) }
  )> }
);

export type TripsByUserDashboardQueryVariables = {
  id: Scalars['Int']
};


export type TripsByUserDashboardQuery = (
  { __typename?: 'Query' }
  & { allTrips: Maybe<(
    { __typename?: 'TripsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Trip' }
      & Pick<Trip, 'id' | 'name' | 'startDate' | 'endDate'>
      & { juncturesByTripId: (
        { __typename?: 'JuncturesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Juncture' }
          & Pick<Juncture, 'id' | 'name' | 'arrivalDate' | 'city' | 'country'>
        )>> }
      ), imagesByTripId: (
        { __typename?: 'ImagesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Image' }
          & Pick<Image, 'id' | 'url'>
        )>> }
      ) }
    )>> }
  )> }
);

export type TripsByUserIdQueryVariables = {
  userId: Scalars['Int']
};


export type TripsByUserIdQuery = (
  { __typename?: 'Query' }
  & { allTrips: Maybe<(
    { __typename?: 'TripsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Trip' }
      & Pick<Trip, 'id' | 'name'>
    )>> }
  )> }
);

export type TripsByUserQueryVariables = {
  id: Scalars['Int']
};


export type TripsByUserQuery = (
  { __typename?: 'Query' }
  & { allTrips: Maybe<(
    { __typename?: 'TripsConnection' }
    & { nodes: Array<Maybe<(
      { __typename?: 'Trip' }
      & Pick<Trip, 'id' | 'name'>
      & { juncturesByTripId: (
        { __typename?: 'JuncturesConnection' }
        & { nodes: Array<Maybe<(
          { __typename?: 'Juncture' }
          & Pick<Juncture, 'name' | 'id' | 'city' | 'country'>
        )>> }
      ) }
    )>> }
  )> }
);

export type UserTrackedTripsQueryVariables = {
  username: Scalars['String']
};


export type UserTrackedTripsQuery = (
  { __typename?: 'Query' }
  & { accountByUsername: Maybe<(
    { __typename?: 'Account' }
    & Pick<Account, 'id'>
    & { tracksByUserId: (
      { __typename?: 'TracksConnection' }
      & Pick<TracksConnection, 'totalCount'>
      & { nodes: Array<Maybe<(
        { __typename?: 'Track' }
        & { accountByTrackUserId: Maybe<(
          { __typename?: 'Account' }
          & Pick<Account, 'profilePhoto'>
          & { tripsByUserId: (
            { __typename?: 'TripsConnection' }
            & { nodes: Array<Maybe<(
              { __typename?: 'Trip' }
              & Pick<Trip, 'id' | 'name' | 'startDate' | 'endDate'>
              & { imagesByTripId: (
                { __typename?: 'ImagesConnection' }
                & { nodes: Array<Maybe<(
                  { __typename?: 'Image' }
                  & Pick<Image, 'id' | 'url'>
                )>> }
              ) }
            )>> }
          ) }
          & AccountByAuthorFragment
        )> }
      )>> }
    ) }
  )> }
);

export const ImagesByPostIdFragmentDoc = gql`
    fragment ImagesByPostId on Image {
  id
  url
  type
  accountByUserId {
    id
  }
}
    `;
export const ImageFragmentDoc = gql`
    fragment Image on Image {
  id
  url
  description
  title
  type
  accountByUserId {
    id
    username
  }
  likesByUser: likesByImageId(condition: {userId: $userId}) {
    nodes {
      id
    }
  }
  totalLikes: likesByImageId {
    totalCount
  }
}
    `;
export const AccountByAuthorFragmentDoc = gql`
    fragment AccountByAuthor on Account {
  id
  firstName
  lastName
  username
}
    `;
export const JunctureDataFragmentDoc = gql`
    fragment JunctureData on Juncture {
  id
  name
  arrivalDate
  description
  city
  country
  type
  postsByJunctureId {
    nodes {
      id
      title
      accountByAuthor {
        ...AccountByAuthor
      }
      publishedDate
      imagesByPostId {
        nodes {
          id
          url
          type
          accountByUserId {
            id
          }
        }
      }
    }
  }
  imagesByJunctureId(condition: {type: GALLERY}) {
    nodes {
      id
      postId
      type
      url
      description
      accountByUserId {
        id
        username
      }
      likesByUser: likesByImageId(condition: {userId: $userId}) {
        nodes {
          id
        }
      }
      totalLikes: likesByImageId {
        totalCount
      }
    }
  }
  likesByUser: likesByJunctureId(condition: {userId: $userId}) {
    nodes {
      id
    }
  }
  totalLikes: likesByJunctureId {
    totalCount
  }
}
    ${AccountByAuthorFragmentDoc}`;
export const PostDataFragmentDoc = gql`
    fragment PostData on Post {
  id
  title
  subtitle
  content
  publishedDate
  updatedAt
}
    `;
export const TripsByUserIdFragmentDoc = gql`
    fragment TripsByUserId on Trip {
  id
  name
  startDate
  endDate
  imagesByTripId(condition: {type: BANNER}, first: 1) {
    nodes {
      url
    }
  }
}
    `;
export const AuthAdminAccountDocument = gql`
    mutation authAdminAccount($email: String!, $password: String!) {
  authenticateAdminAccount(input: {email: $email, password: $password}) {
    jwtToken
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AuthAdminAccountGQL extends Apollo.Mutation<AuthAdminAccountMutation, AuthAdminAccountMutationVariables> {
    document = AuthAdminAccountDocument;
    
  }
export const AuthUserAccountDocument = gql`
    mutation authUserAccount($email: String!, $password: String!) {
  authenticateUserAccount(input: {email: $email, password: $password}) {
    jwtToken
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AuthUserAccountGQL extends Apollo.Mutation<AuthUserAccountMutation, AuthUserAccountMutationVariables> {
    document = AuthUserAccountDocument;
    
  }
export const CreateEmailListEntryDocument = gql`
    mutation createEmailListEntry($email: String!) {
  createEmailList(input: {emailList: {email: $email}}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateEmailListEntryGQL extends Apollo.Mutation<CreateEmailListEntryMutation, CreateEmailListEntryMutationVariables> {
    document = CreateEmailListEntryDocument;
    
  }
export const CreateImageDocument = gql`
    mutation createImage($tripId: Int, $junctureId: Int, $postId: Int, $userId: Int!, $type: ImageType!, $url: String!, $title: String, $description: String) {
  createImage(input: {image: {tripId: $tripId, junctureId: $junctureId, postId: $postId, userId: $userId, type: $type, url: $url, title: $title, description: $description}}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateImageGQL extends Apollo.Mutation<CreateImageMutation, CreateImageMutationVariables> {
    document = CreateImageDocument;
    
  }
export const CreateJunctureDocument = gql`
    mutation createJuncture($userId: Int!, $tripId: Int!, $type: JunctureType!, $name: String!, $arrivalDate: BigInt!, $description: String, $lat: BigFloat!, $lon: BigFloat!, $city: String, $country: String, $isDraft: Boolean, $markerImg: String) {
  createJuncture(input: {juncture: {userId: $userId, tripId: $tripId, type: $type, name: $name, arrivalDate: $arrivalDate, description: $description, lat: $lat, lon: $lon, city: $city, country: $country, isDraft: $isDraft, markerImg: $markerImg}}) {
    juncture {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateJunctureGQL extends Apollo.Mutation<CreateJunctureMutation, CreateJunctureMutationVariables> {
    document = CreateJunctureDocument;
    
  }
export const CreateLikeDocument = gql`
    mutation createLike($tripId: Int, $junctureId: Int, $postId: Int, $imageId: Int, $userId: Int!) {
  createLike(input: {like: {tripId: $tripId, junctureId: $junctureId, postId: $postId, imageId: $imageId, userId: $userId}}) {
    likeEdge {
      node {
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateLikeGQL extends Apollo.Mutation<CreateLikeMutation, CreateLikeMutationVariables> {
    document = CreateLikeDocument;
    
  }
export const CreatePostDocument = gql`
    mutation createPost($author: Int!, $title: String!, $subtitle: String!, $content: String!, $isDraft: Boolean!, $isScheduled: Boolean!, $isPublished: Boolean!, $tripId: Int, $city: String, $country: String, $junctureId: Int, $scheduledDate: BigInt, $publishedDate: BigInt) {
  createPost(input: {post: {author: $author, title: $title, subtitle: $subtitle, content: $content, isDraft: $isDraft, isScheduled: $isScheduled, isPublished: $isPublished, tripId: $tripId, junctureId: $junctureId, city: $city, country: $country, scheduledDate: $scheduledDate, publishedDate: $publishedDate}}) {
    post {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreatePostGQL extends Apollo.Mutation<CreatePostMutation, CreatePostMutationVariables> {
    document = CreatePostDocument;
    
  }
export const CreatePostTagDocument = gql`
    mutation createPostTag($name: String!, $tagDescription: String) {
  createPostTag(input: {postTag: {name: $name, tagDescription: $tagDescription}}) {
    postTag {
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreatePostTagGQL extends Apollo.Mutation<CreatePostTagMutation, CreatePostTagMutationVariables> {
    document = CreatePostTagDocument;
    
  }
export const CreateTrackDocument = gql`
    mutation createTrack($userId: Int!, $trackUserId: Int!) {
  createTrack(input: {track: {userId: $userId, trackUserId: $trackUserId}}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateTrackGQL extends Apollo.Mutation<CreateTrackMutation, CreateTrackMutationVariables> {
    document = CreateTrackDocument;
    
  }
export const CreateTripDocument = gql`
    mutation createTrip($userId: Int!, $name: String!, $description: String, $startDate: BigInt!, $endDate: BigInt, $startLat: BigFloat!, $startLon: BigFloat!) {
  createTrip(input: {trip: {userId: $userId, name: $name, description: $description, startDate: $startDate, endDate: $endDate, startLat: $startLat, startLon: $startLon}}) {
    trip {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateTripGQL extends Apollo.Mutation<CreateTripMutation, CreateTripMutationVariables> {
    document = CreateTripDocument;
    
  }
export const CreateUserToCountryDocument = gql`
    mutation createUserToCountry($code: String!, $userId: Int!) {
  createUserToCountry(input: {userToCountry: {country: $code, userId: $userId}}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CreateUserToCountryGQL extends Apollo.Mutation<CreateUserToCountryMutation, CreateUserToCountryMutationVariables> {
    document = CreateUserToCountryDocument;
    
  }
export const DeleteAccountDocument = gql`
    mutation deleteAccount($userId: Int!) {
  deleteAccountById(input: {id: $userId}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteAccountGQL extends Apollo.Mutation<DeleteAccountMutation, DeleteAccountMutationVariables> {
    document = DeleteAccountDocument;
    
  }
export const DeleteImageByIdDocument = gql`
    mutation deleteImageById($id: Int!) {
  deleteImageById(input: {id: $id}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteImageByIdGQL extends Apollo.Mutation<DeleteImageByIdMutation, DeleteImageByIdMutationVariables> {
    document = DeleteImageByIdDocument;
    
  }
export const DeleteJunctureByIdDocument = gql`
    mutation deleteJunctureById($junctureId: Int!) {
  deleteJunctureById(input: {id: $junctureId}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteJunctureByIdGQL extends Apollo.Mutation<DeleteJunctureByIdMutation, DeleteJunctureByIdMutationVariables> {
    document = DeleteJunctureByIdDocument;
    
  }
export const DeleteLikeByIdDocument = gql`
    mutation deleteLikeById($likeId: Int!) {
  deleteLikeById(input: {id: $likeId}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteLikeByIdGQL extends Apollo.Mutation<DeleteLikeByIdMutation, DeleteLikeByIdMutationVariables> {
    document = DeleteLikeByIdDocument;
    
  }
export const DeletePostByIdDocument = gql`
    mutation deletePostById($id: Int!) {
  deletePostById(input: {id: $id}) {
    post {
      title
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeletePostByIdGQL extends Apollo.Mutation<DeletePostByIdMutation, DeletePostByIdMutationVariables> {
    document = DeletePostByIdDocument;
    
  }
export const DeletePostToTagByIdDocument = gql`
    mutation deletePostToTagById($id: Int!) {
  deletePostToTagById(input: {id: $id}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeletePostToTagByIdGQL extends Apollo.Mutation<DeletePostToTagByIdMutation, DeletePostToTagByIdMutationVariables> {
    document = DeletePostToTagByIdDocument;
    
  }
export const DeleteTrackByIdDocument = gql`
    mutation deleteTrackById($trackId: Int!) {
  deleteTrackById(input: {id: $trackId}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteTrackByIdGQL extends Apollo.Mutation<DeleteTrackByIdMutation, DeleteTrackByIdMutationVariables> {
    document = DeleteTrackByIdDocument;
    
  }
export const DeleteTripByIdDocument = gql`
    mutation deleteTripById($tripId: Int!) {
  deleteTripById(input: {id: $tripId}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class DeleteTripByIdGQL extends Apollo.Mutation<DeleteTripByIdMutation, DeleteTripByIdMutationVariables> {
    document = DeleteTripByIdDocument;
    
  }
export const RegisterAdminAccountDocument = gql`
    mutation registerAdminAccount($username: String!, $firstName: String!, $lastName: String!, $password: String!, $email: String!) {
  registerAdminAccount(input: {username: $username, firstName: $firstName, lastName: $lastName, password: $password, email: $email}) {
    account {
      ...AccountByAuthor
    }
  }
}
    ${AccountByAuthorFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class RegisterAdminAccountGQL extends Apollo.Mutation<RegisterAdminAccountMutation, RegisterAdminAccountMutationVariables> {
    document = RegisterAdminAccountDocument;
    
  }
export const RegisterUserAccountDocument = gql`
    mutation registerUserAccount($username: String!, $firstName: String!, $lastName: String!, $password: String!, $email: String!) {
  registerUserAccount(input: {username: $username, firstName: $firstName, lastName: $lastName, password: $password, email: $email}) {
    account {
      ...AccountByAuthor
    }
  }
}
    ${AccountByAuthorFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class RegisterUserAccountGQL extends Apollo.Mutation<RegisterUserAccountMutation, RegisterUserAccountMutationVariables> {
    document = RegisterUserAccountDocument;
    
  }
export const ResetPasswordDocument = gql`
    mutation resetPassword($email: String!) {
  resetPassword(input: {email: $email}) {
    string
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class ResetPasswordGQL extends Apollo.Mutation<ResetPasswordMutation, ResetPasswordMutationVariables> {
    document = ResetPasswordDocument;
    
  }
export const UpdateAccountByIdDocument = gql`
    mutation updateAccountById($id: Int!, $firstName: String!, $lastName: String!, $userStatus: String, $heroPhoto: String, $profilePhoto: String, $city: String, $country: String, $autoUpdate: Boolean!) {
  updateAccountById(input: {id: $id, accountPatch: {firstName: $firstName, lastName: $lastName, userStatus: $userStatus, profilePhoto: $profilePhoto, heroPhoto: $heroPhoto, city: $city, country: $country, autoUpdateLocation: $autoUpdate}}) {
    account {
      ...AccountByAuthor
      userStatus
      heroPhoto
      profilePhoto
      city
      country
      autoUpdateLocation
    }
  }
}
    ${AccountByAuthorFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateAccountByIdGQL extends Apollo.Mutation<UpdateAccountByIdMutation, UpdateAccountByIdMutationVariables> {
    document = UpdateAccountByIdDocument;
    
  }
export const UpdateConfigDocument = gql`
    mutation updateConfig($primaryColor: String!, $secondaryColor: String!, $tagline: String!, $heroBanner: String!) {
  updateConfigById(input: {id: 1, configPatch: {primaryColor: $primaryColor, secondaryColor: $secondaryColor, tagline: $tagline, heroBanner: $heroBanner}}) {
    clientMutationId
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateConfigGQL extends Apollo.Mutation<UpdateConfigMutation, UpdateConfigMutationVariables> {
    document = UpdateConfigDocument;
    
  }
export const UpdateJunctureDocument = gql`
    mutation updateJuncture($junctureId: Int!, $userId: Int, $tripId: Int, $type: JunctureType, $name: String, $arrivalDate: BigInt, $description: String, $lat: BigFloat, $lon: BigFloat, $city: String, $country: String, $isDraft: Boolean, $markerImg: String) {
  updateJunctureById(input: {id: $junctureId, juncturePatch: {userId: $userId, tripId: $tripId, name: $name, arrivalDate: $arrivalDate, description: $description, type: $type, lat: $lat, lon: $lon, city: $city, country: $country, isDraft: $isDraft, markerImg: $markerImg}}) {
    juncture {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateJunctureGQL extends Apollo.Mutation<UpdateJunctureMutation, UpdateJunctureMutationVariables> {
    document = UpdateJunctureDocument;
    
  }
export const UpdatePasswordDocument = gql`
    mutation updatePassword($userId: Int!, $password: String!, $newPassword: String!) {
  updatePassword(input: {userId: $userId, password: $password, newPassword: $newPassword}) {
    boolean
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdatePasswordGQL extends Apollo.Mutation<UpdatePasswordMutation, UpdatePasswordMutationVariables> {
    document = UpdatePasswordDocument;
    
  }
export const UpdatePostByIdDocument = gql`
    mutation updatePostById($postId: Int!, $title: String, $subtitle: String, $content: String, $tripId: Int, $junctureId: Int, $city: String, $country: String, $isDraft: Boolean, $isScheduled: Boolean, $isPublished: Boolean, $scheduledDate: BigInt, $publishedDate: BigInt) {
  updatePostById(input: {id: $postId, postPatch: {title: $title, subtitle: $subtitle, content: $content, tripId: $tripId, junctureId: $junctureId, city: $city, country: $country, isDraft: $isDraft, isScheduled: $isScheduled, isPublished: $isPublished, scheduledDate: $scheduledDate, publishedDate: $publishedDate}}) {
    post {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdatePostByIdGQL extends Apollo.Mutation<UpdatePostByIdMutation, UpdatePostByIdMutationVariables> {
    document = UpdatePostByIdDocument;
    
  }
export const UpdateTripByIdDocument = gql`
    mutation updateTripById($tripId: Int!, $name: String, $description: String, $startDate: BigInt, $endDate: BigInt, $startLat: BigFloat, $startLon: BigFloat) {
  updateTripById(input: {id: $tripId, tripPatch: {name: $name, description: $description, startDate: $startDate, endDate: $endDate, startLat: $startLat, startLon: $startLon}}) {
    trip {
      id
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class UpdateTripByIdGQL extends Apollo.Mutation<UpdateTripByIdMutation, UpdateTripByIdMutationVariables> {
    document = UpdateTripByIdDocument;
    
  }
export const AccountByUsernameDocument = gql`
    query accountByUsername($username: String!, $userId: Int) {
  accountByUsername(username: $username) {
    id
    username
    firstName
    lastName
    profilePhoto
    heroPhoto
    city
    country
    userStatus
    postsByAuthor(condition: {isPublished: true}, last: 11) {
      nodes {
        id
        title
        accountByAuthor {
          ...AccountByAuthor
        }
        imagesByPostId(condition: {type: LEAD_LARGE}) {
          nodes {
            url
            type
          }
        }
      }
    }
    imagesByUserId(first: 12, filter: {type: {notEqualTo: LEAD_SMALL}}, orderBy: PRIMARY_KEY_DESC) {
      nodes {
        id
        url
        title
        type
        description
        accountByUserId {
          id
          username
        }
        likesByUser: likesByImageId(condition: {userId: $userId}) {
          nodes {
            id
          }
        }
        totalLikes: likesByImageId {
          totalCount
        }
      }
    }
    tripsByUserId(last: 5, orderBy: PRIMARY_KEY_DESC) {
      nodes {
        id
        ...TripsByUserId
      }
    }
    totalJunctureCount: juncturesByUserId {
      totalCount
    }
    totalImageCount: imagesByUserId {
      totalCount
    }
    totalPostCount: postsByAuthor {
      totalCount
    }
    totalTripCount: tripsByUserId {
      totalCount
    }
    tracksByUserId {
      totalCount
    }
    tracksByTrackUserId {
      totalCount
    }
    userToCountriesByUserId(orderBy: COUNTRY_ASC) {
      nodes {
        countryByCountry {
          code
          name
        }
      }
    }
  }
}
    ${AccountByAuthorFragmentDoc}
${TripsByUserIdFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class AccountByUsernameGQL extends Apollo.Query<AccountByUsernameQuery, AccountByUsernameQueryVariables> {
    document = AccountByUsernameDocument;
    
  }
export const AllConfigsDocument = gql`
    query allConfigs {
  allConfigs {
    nodes {
      primaryColor
      secondaryColor
      tagline
      heroBanner
      postByFeaturedStory1 {
        id
        title
        subtitle
        imagesByPostId(condition: {type: LEAD_SMALL}) {
          nodes {
            url
          }
        }
      }
      postByFeaturedStory2 {
        id
        title
        subtitle
        imagesByPostId(condition: {type: LEAD_SMALL}) {
          nodes {
            url
          }
        }
      }
      postByFeaturedStory3 {
        id
        title
        subtitle
        imagesByPostId(condition: {type: LEAD_SMALL}) {
          nodes {
            url
          }
        }
      }
      tripByFeaturedTrip1 {
        id
        name
        startDate
        endDate
        imagesByTripId(condition: {type: BANNER}, first: 1) {
          nodes {
            url
          }
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AllConfigsGQL extends Apollo.Query<AllConfigsQuery, AllConfigsQueryVariables> {
    document = AllConfigsDocument;
    
  }
export const GetAllCountriesDocument = gql`
    query getAllCountries {
  allCountries {
    nodes {
      code
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAllCountriesGQL extends Apollo.Query<GetAllCountriesQuery, GetAllCountriesQueryVariables> {
    document = GetAllCountriesDocument;
    
  }
export const AllImagesByTripDocument = gql`
    query allImagesByTrip($tripId: Int!, $first: Int, $offset: Int, $userId: Int) {
  allImages(condition: {tripId: $tripId}, first: $first, offset: $offset, filter: {type: {notEqualTo: LEAD_SMALL}}, orderBy: PRIMARY_KEY_DESC) {
    nodes {
      ...Image
    }
  }
}
    ${ImageFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class AllImagesByTripGQL extends Apollo.Query<AllImagesByTripQuery, AllImagesByTripQueryVariables> {
    document = AllImagesByTripDocument;
    
  }
export const AllImagesByUserDocument = gql`
    query allImagesByUser($userId: Int, $first: Int, $offset: Int) {
  allImages(condition: {userId: $userId}, first: $first, offset: $offset, filter: {type: {notEqualTo: LEAD_SMALL}}, orderBy: PRIMARY_KEY_DESC) {
    nodes {
      ...Image
    }
  }
}
    ${ImageFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class AllImagesByUserGQL extends Apollo.Query<AllImagesByUserQuery, AllImagesByUserQueryVariables> {
    document = AllImagesByUserDocument;
    
  }
export const RecentImagesDocument = gql`
    query recentImages($last: Int, $userId: Int) {
  allImages(condition: {type: GALLERY}, last: $last) {
    nodes {
      ...Image
    }
  }
}
    ${ImageFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class RecentImagesGQL extends Apollo.Query<RecentImagesQuery, RecentImagesQueryVariables> {
    document = RecentImagesDocument;
    
  }
export const AllPostTagsDocument = gql`
    query allPostTags {
  allPostTags {
    nodes {
      name
      tagDescription
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AllPostTagsGQL extends Apollo.Query<AllPostTagsQuery, AllPostTagsQueryVariables> {
    document = AllPostTagsDocument;
    
  }
export const AllPostToTagsDocument = gql`
    query allPostToTags($tagId: String) {
  allPostToTags(condition: {postTagId: $tagId}, orderBy: PRIMARY_KEY_DESC) {
    nodes {
      postByPostId {
        id
        title
        accountByAuthor {
          ...AccountByAuthor
        }
        subtitle
        createdAt
        imagesByPostId {
          nodes {
            ...ImagesByPostId
            title
          }
        }
      }
    }
  }
}
    ${AccountByAuthorFragmentDoc}
${ImagesByPostIdFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class AllPostToTagsGQL extends Apollo.Query<AllPostToTagsQuery, AllPostToTagsQueryVariables> {
    document = AllPostToTagsDocument;
    
  }
export const AllPostsByUserDocument = gql`
    query allPostsByUser($author: Int!) {
  allPosts(orderBy: PRIMARY_KEY_DESC, condition: {author: $author}) {
    nodes {
      id
      title
      publishedDate
      isDraft
      isScheduled
      isPublished
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AllPostsByUserGQL extends Apollo.Query<AllPostsByUserQuery, AllPostsByUserQueryVariables> {
    document = AllPostsByUserDocument;
    
  }
export const AllPublishedPostsDocument = gql`
    query allPublishedPosts($quantity: Int, $offset: Int) {
  allPosts(orderBy: PRIMARY_KEY_DESC, condition: {isPublished: true}, first: $quantity, offset: $offset) {
    totalCount
    nodes {
      ...PostData
      accountByAuthor {
        ...AccountByAuthor
      }
      imagesByPostId {
        nodes {
          ...ImagesByPostId
        }
      }
    }
  }
}
    ${PostDataFragmentDoc}
${AccountByAuthorFragmentDoc}
${ImagesByPostIdFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class AllPublishedPostsGQL extends Apollo.Query<AllPublishedPostsQuery, AllPublishedPostsQueryVariables> {
    document = AllPublishedPostsDocument;
    
  }
export const CheckTrackingByUserDocument = gql`
    query checkTrackingByUser($trackedUser: Int!, $trackingUser: Int!) {
  accountById(id: $trackedUser) {
    tracksByTrackUserId(condition: {userId: $trackingUser}) {
      nodes {
        id
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CheckTrackingByUserGQL extends Apollo.Query<CheckTrackingByUserQuery, CheckTrackingByUserQueryVariables> {
    document = CheckTrackingByUserDocument;
    
  }
export const CurrentAccountDocument = gql`
    query currentAccount {
  currentAccount {
    id
    firstName
    lastName
    username
    profilePhoto
    heroPhoto
    userStatus
    city
    country
    autoUpdateLocation
    autoUpdateVisited
    userToCountriesByUserId {
      nodes {
        id
        countryByCountry {
          code
          name
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CurrentAccountGQL extends Apollo.Query<CurrentAccountQuery, CurrentAccountQueryVariables> {
    document = CurrentAccountDocument;
    
  }
export const FullJunctureByIdDocument = gql`
    query fullJunctureById($id: Int!, $userId: Int) {
  junctureById(id: $id) {
    ...JunctureData
    lat
    lon
    markerImg
    userId
    coordsByJunctureId {
      nodes {
        id
        lat
        lon
        elevation
        coordTime
      }
    }
    tripByTripId {
      id
      name
      juncturesByTripId {
        nodes {
          name
          id
        }
      }
    }
    likesByUser: likesByJunctureId(condition: {userId: $userId}) {
      nodes {
        id
      }
    }
    totalLikes: likesByJunctureId {
      totalCount
    }
  }
}
    ${JunctureDataFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class FullJunctureByIdGQL extends Apollo.Query<FullJunctureByIdQuery, FullJunctureByIdQueryVariables> {
    document = FullJunctureByIdDocument;
    
  }
export const PartialJunctureByIdDocument = gql`
    query partialJunctureById($id: Int!, $userId: Int) {
  junctureById(id: $id) {
    ...JunctureData
  }
}
    ${JunctureDataFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class PartialJunctureByIdGQL extends Apollo.Query<PartialJunctureByIdQuery, PartialJunctureByIdQueryVariables> {
    document = PartialJunctureByIdDocument;
    
  }
export const PostByIdDocument = gql`
    query postById($id: Int!, $userId: Int) {
  postById(id: $id) {
    id
    title
    subtitle
    content
    createdAt
    updatedAt
    scheduledDate
    publishedDate
    isDraft
    isScheduled
    tripId
    junctureId
    city
    country
    accountByAuthor {
      ...AccountByAuthor
    }
    postToTagsByPostId {
      nodes {
        postTagByPostTagId {
          name
          postToTagsByPostTagId(first: 5, orderBy: ID_DESC) {
            nodes {
              postByPostId {
                id
                title
                createdAt
                accountByAuthor {
                  ...AccountByAuthor
                }
                imagesByPostId {
                  nodes {
                    ...ImagesByPostId
                  }
                }
              }
            }
          }
        }
      }
    }
    imagesByPostId(filter: {type: {notEqualTo: LEAD_SMALL}}) {
      nodes {
        id
        type
        url
        description
        title
        accountByUserId {
          id
          username
        }
        likesByUser: likesByImageId(condition: {userId: $userId}) {
          nodes {
            id
          }
        }
        totalLikes: likesByImageId {
          totalCount
        }
      }
    }
    likesByUser: likesByPostId(condition: {userId: $userId}) {
      nodes {
        id
      }
    }
    totalLikes: likesByPostId {
      totalCount
    }
  }
}
    ${AccountByAuthorFragmentDoc}
${ImagesByPostIdFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class PostByIdGQL extends Apollo.Query<PostByIdQuery, PostByIdQueryVariables> {
    document = PostByIdDocument;
    
  }
export const PostsByTripDocument = gql`
    query postsByTrip($id: Int!) {
  tripById(id: $id) {
    postsByTripId(first: 10, orderBy: ID_DESC) {
      totalCount
      nodes {
        id
        title
        accountByAuthor {
          ...AccountByAuthor
        }
        subtitle
        createdAt
        imagesByPostId {
          nodes {
            ...ImagesByPostId
          }
        }
      }
    }
  }
}
    ${AccountByAuthorFragmentDoc}
${ImagesByPostIdFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class PostsByTripGQL extends Apollo.Query<PostsByTripQuery, PostsByTripQueryVariables> {
    document = PostsByTripDocument;
    
  }
export const RecentUserActivityDocument = gql`
    query recentUserActivity($username: String!) {
  accountByUsername(username: $username) {
    tripsByUserId(last: 1) {
      nodes {
        ...TripsByUserId
      }
    }
    juncturesByUserId(first: 2, orderBy: PRIMARY_KEY_DESC) {
      nodes {
        id
        name
        markerImg
        city
        country
        type
      }
    }
    postsByAuthor(first: 3, condition: {isPublished: true}, orderBy: PRIMARY_KEY_DESC) {
      nodes {
        title
        id
        imagesByPostId(condition: {type: LEAD_SMALL}) {
          nodes {
            url
          }
        }
        createdAt
      }
    }
  }
}
    ${TripsByUserIdFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class RecentUserActivityGQL extends Apollo.Query<RecentUserActivityQuery, RecentUserActivityQueryVariables> {
    document = RecentUserActivityDocument;
    
  }
export const SearchSiteDocument = gql`
    query searchSite($query: String!) {
  searchTrips(query: $query, first: 5) {
    nodes {
      id
      name
    }
  }
  searchPosts(query: $query, first: 10) {
    nodes {
      id
      title
      subtitle
      createdAt
    }
  }
  searchAccounts(query: $query, first: 10) {
    nodes {
      profilePhoto
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class SearchSiteGQL extends Apollo.Query<SearchSiteQuery, SearchSiteQueryVariables> {
    document = SearchSiteDocument;
    
  }
export const SearchTagsDocument = gql`
    query searchTags($query: String!) {
  searchTags(query: $query) {
    nodes {
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class SearchTagsGQL extends Apollo.Query<SearchTagsQuery, SearchTagsQueryVariables> {
    document = SearchTagsDocument;
    
  }
export const SearchCountriesDocument = gql`
    query searchCountries($query: String!) {
  searchCountries(query: $query) {
    nodes {
      code
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class SearchCountriesGQL extends Apollo.Query<SearchCountriesQuery, SearchCountriesQueryVariables> {
    document = SearchCountriesDocument;
    
  }
export const SearchPostsDocument = gql`
    query searchPosts($query: String!, $postStatus: String) {
  searchPosts(query: $query, first: 10) {
    nodes {
      id
      title
      updatedAt
      isDraft
      isScheduled
      isPublished
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class SearchPostsGQL extends Apollo.Query<SearchPostsQuery, SearchPostsQueryVariables> {
    document = SearchPostsDocument;
    
  }
export const TagsByNameDocument = gql`
    query tagsByName($tagName: String!) {
  allPostTags(condition: {name: $tagName}) {
    nodes {
      tagDescription
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class TagsByNameGQL extends Apollo.Query<TagsByNameQuery, TagsByNameQueryVariables> {
    document = TagsByNameDocument;
    
  }
export const TripByIdDocument = gql`
    query tripById($id: Int!, $userId: Int) {
  tripById(id: $id) {
    id
    name
    startDate
    endDate
    startLat
    startLon
    description
    juncturesByTripId {
      totalCount
      nodes {
        name
        lat
        lon
        arrivalDate
        id
        markerImg
        description
        type
        city
        country
        coordsByJunctureId {
          nodes {
            lat
            lon
            elevation
            coordTime
          }
        }
      }
    }
    accountByUserId {
      ...AccountByAuthor
      profilePhoto
    }
    imagesByTripId {
      totalCount
    }
    gallery: imagesByTripId(first: 12, filter: {or: [{type: {equalTo: GALLERY}}, {type: {equalTo: LEAD_LARGE}}]}, orderBy: PRIMARY_KEY_DESC) {
      nodes {
        id
        url
        title
        type
        description
        accountByUserId {
          id
          username
        }
        likesByUser: likesByImageId(condition: {userId: 1}) {
          nodes {
            id
          }
        }
        totalLikes: likesByImageId {
          totalCount
        }
      }
    }
    banners: imagesByTripId(filter: {type: {equalTo: BANNER}}) {
      nodes {
        id
        url
        title
        type
        description
        accountByUserId {
          id
          username
        }
        likesByUser: likesByImageId(condition: {userId: 1}) {
          nodes {
            id
          }
        }
        totalLikes: likesByImageId {
          totalCount
        }
      }
    }
    likesByUser: likesByTripId(condition: {userId: $userId}) {
      nodes {
        id
      }
    }
    totalLikes: likesByTripId {
      totalCount
    }
  }
}
    ${AccountByAuthorFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class TripByIdGQL extends Apollo.Query<TripByIdQuery, TripByIdQueryVariables> {
    document = TripByIdDocument;
    
  }
export const TripsByUserDashboardDocument = gql`
    query tripsByUserDashboard($id: Int!) {
  allTrips(condition: {userId: $id}) {
    nodes {
      id
      name
      startDate
      endDate
      juncturesByTripId {
        nodes {
          id
          name
          arrivalDate
          city
          country
        }
      }
      imagesByTripId {
        nodes {
          id
          url
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class TripsByUserDashboardGQL extends Apollo.Query<TripsByUserDashboardQuery, TripsByUserDashboardQueryVariables> {
    document = TripsByUserDashboardDocument;
    
  }
export const TripsByUserIdDocument = gql`
    query tripsByUserId($userId: Int!) {
  allTrips(condition: {userId: $userId}, orderBy: PRIMARY_KEY_DESC) {
    nodes {
      id
      name
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class TripsByUserIdGQL extends Apollo.Query<TripsByUserIdQuery, TripsByUserIdQueryVariables> {
    document = TripsByUserIdDocument;
    
  }
export const TripsByUserDocument = gql`
    query tripsByUser($id: Int!) {
  allTrips(condition: {userId: $id}) {
    nodes {
      id
      name
      juncturesByTripId {
        nodes {
          name
          id
          city
          country
        }
      }
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class TripsByUserGQL extends Apollo.Query<TripsByUserQuery, TripsByUserQueryVariables> {
    document = TripsByUserDocument;
    
  }
export const UserTrackedTripsDocument = gql`
    query userTrackedTrips($username: String!) {
  accountByUsername(username: $username) {
    id
    tracksByUserId {
      totalCount
      nodes {
        accountByTrackUserId {
          ...AccountByAuthor
          profilePhoto
          tripsByUserId(orderBy: START_DATE_DESC) {
            nodes {
              id
              name
              startDate
              endDate
              imagesByTripId(condition: {type: BANNER}, first: 1) {
                nodes {
                  id
                  url
                }
              }
            }
          }
        }
      }
    }
  }
}
    ${AccountByAuthorFragmentDoc}`;

  @Injectable({
    providedIn: 'root'
  })
  export class UserTrackedTripsGQL extends Apollo.Query<UserTrackedTripsQuery, UserTrackedTripsQueryVariables> {
    document = UserTrackedTripsDocument;
    
  }